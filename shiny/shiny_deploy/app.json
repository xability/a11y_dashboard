[{"name": "app.py", "content": "import seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom shiny import App, ui, render\nfrom maidr.widget.shiny import render_maidr\n\n# Set random seed\nnp.random.seed(1000)\n\n# Define the UI components for the Shiny application with tabs\napp_ui = ui.page_fluid(\n    ui.navset_tab(\n        # First tab: Histogram with dropdown and plot\n        ui.nav_panel(\n            \"Histogram\",\n            ui.input_select(\n                \"distribution_type\",\n                \"Select histogram distribution type:\",\n                choices=[\n                    \"Normal Distribution\",\n                    \"Positively Skewed\",\n                    \"Negatively Skewed\",\n                    \"Unimodal Distribution\",\n                    \"Bimodal Distribution\",\n                    \"Multimodal Distribution\",\n                ],\n                selected=\"Normal Distribution\",\n            ),\n            ui.output_ui(\"create_histogram\"),\n        ),\n        # Second tab: Box Plot with dropdown and plot\n        ui.nav_panel(\n            \"Box Plot\",\n            ui.input_select(\n                \"boxplot_type\",\n                \"Select box plot type:\",\n                choices=[\n                    \"Positively Skewed with Outliers\",\n                    \"Negatively Skewed\",\n                    \"Symmetric with Outlier\",\n                    \"Symmetric without Outlier\",\n                ],\n                selected=\"Positively Skewed with Outliers\",\n            ),\n            ui.output_ui(\"create_boxplot\"),\n        )\n    )\n)\n\n# Define the server logic for generating histograms and box plots\ndef server(input, output, session):\n    @render_maidr\n    def create_histogram():\n        distribution_type = input.distribution_type()\n\n        # Generate data based on the selected distribution\n        if distribution_type == \"Normal Distribution\":\n            data = np.random.normal(size=1000)\n        elif distribution_type == \"Positively Skewed\":\n            data = np.random.exponential(scale=3, size=1000)\n        elif distribution_type == \"Negatively Skewed\":\n            data = -np.random.exponential(scale=2, size=1000) + 5\n        elif distribution_type == \"Unimodal Distribution\":\n            data = np.random.normal(loc=0, scale=2.5, size=1000)\n        elif distribution_type == \"Bimodal Distribution\":\n            data = np.concatenate([np.random.normal(-2, 0.5, size=500), np.random.normal(2, 0.5, size=500)])\n        elif distribution_type == \"Multimodal Distribution\":\n            data = np.concatenate([np.random.normal(-2, 0.5, size=300), np.random.normal(2, 0.5, size=300), np.random.normal(5, 0.5, size=400)])\n        else:\n            data = np.random.normal(size=1000)\n        \n        # Create the plot using matplotlib\n        fig, ax = plt.subplots(figsize=(10, 6))\n        hist_plot = sns.histplot(data, kde=True, bins=20, color=\"#007bc2\", edgecolor=\"white\", ax=ax)\n        ax.set_title(f\"Histogram of {distribution_type}\")\n        ax.set_xlabel(\"Value\")\n        ax.set_ylabel(\"Frequency\")\n        \n        return hist_plot\n\n    @render_maidr\n    def create_boxplot():\n        boxplot_type = input.boxplot_type()\n\n        # Generate data based on the selected box plot type\n        if boxplot_type == \"Positively Skewed with Outliers\":\n            data = np.random.lognormal(mean=0, sigma=0.5, size=1000)\n            outliers = np.random.uniform(low=np.max(data), high=np.max(data)*1.5, size=5)\n            data = np.concatenate([data, outliers])\n        elif boxplot_type == \"Negatively Skewed\":\n            data = -np.random.lognormal(mean=0, sigma=0.5, size=1000)\n        elif boxplot_type == \"Symmetric with Outlier\":\n            # Generate symmetric data\n            data = np.random.normal(loc=0, scale=1, size=1000)\n            # Add outliers symmetrically\n            high_outliers = np.random.uniform(low=3, high=4, size=3)\n            low_outliers = np.random.uniform(low=-4, high=-3, size=3)\n            data = np.concatenate([data, high_outliers, low_outliers])\n        elif boxplot_type == \"Symmetric without Outlier\":\n            data = np.random.normal(loc=0, scale=1, size=1000)\n            # Limit the range of data to ensure no outliers\n            data = data[np.abs(data) < 2]  # Remove extreme values that might be outliers\n        else:\n            data = np.random.normal(loc=0, scale=1, size=1000)\n\n        # Create the plot using matplotlib\n        fig, ax = plt.subplots(figsize=(10, 6))\n        box_plot = sns.boxplot(x=data, ax=ax, color=\"#007bc2\")\n        ax.set_title(f\"Box Plot: {boxplot_type}\")\n        ax.set_xlabel(\"Value\")\n        \n        return box_plot\n\n# Create the app\napp = App(app_ui, server)\n\n# Run the app\nif __name__ == \"__main__\":\n    app.run()", "type": "text"}, {"name": "requirements.txt", "content": "shiny\nseaborn\npandas", "type": "text"}, {"name": "shared.py", "content": "from pathlib import Path\n\nimport pandas as pd\n\napp_dir = Path(__file__).parent\ndf = pd.read_csv(app_dir / \"penguins.csv\")\n", "type": "text"}]