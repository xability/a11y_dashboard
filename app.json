[{"name": "app.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport uuid\nimport os\nimport tempfile\nfrom pathlib import Path\nfrom matplotlib.backends.backend_svg import FigureCanvasSVG\nfrom maidr.widget.shiny import render_maidr\nimport maidr\nfrom shiny import App, reactive, render, ui\nfrom shiny.types import FileInfo\n\n# Import plot modules\nfrom plots.utils import color_palettes\nfrom plots.histogram import create_histogram, create_custom_histogram\nfrom plots.boxplot import create_boxplot, create_custom_boxplot\n\n# Function to save HTML with UTF-8 encoding to avoid Windows encoding issues\ndef save_html_utf8(fig, filepath):\n    \"\"\"Save matplotlib figure as HTML with proper UTF-8 encoding\"\"\"\n    import io\n    import sys\n    import codecs\n    import os\n    import builtins\n    from contextlib import redirect_stdout, redirect_stderr\n    \n    # Store original open function\n    original_open = builtins.open\n    \n    def utf8_open(*args, **kwargs):\n        \"\"\"Wrapper for open() that forces UTF-8 encoding for text files\"\"\"\n        # If mode contains 'w' or 'a' and no encoding is specified, use UTF-8\n        if len(args) >= 2:\n            mode = args[1]\n            if isinstance(mode, str) and ('w' in mode or 'a' in mode) and 'b' not in mode:\n                if 'encoding' not in kwargs:\n                    kwargs['encoding'] = 'utf-8'\n        elif 'mode' in kwargs:\n            mode = kwargs['mode']\n            if isinstance(mode, str) and ('w' in mode or 'a' in mode) and 'b' not in mode:\n                if 'encoding' not in kwargs:\n                    kwargs['encoding'] = 'utf-8'\n        \n        return original_open(*args, **kwargs)\n    \n    # Capture stdout/stderr during maidr.save_html to avoid encoding issues\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    \n    try:\n        # Create temporary UTF-8 buffers\n        stdout_buffer = io.StringIO()\n        stderr_buffer = io.StringIO()\n        \n        # Redirect to UTF-8 buffers during maidr.save_html\n        with redirect_stdout(stdout_buffer), redirect_stderr(stderr_buffer):\n            # Monkey patch the open function to force UTF-8\n            builtins.open = utf8_open\n            \n            try:\n                # Create temp file with UTF-8 encoding using codecs\n                temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8')\n                temp_path = temp_file.name\n                temp_file.close()\n                \n                try:\n                    # Try to save directly with monkey-patched open\n                    maidr.save_html(fig, temp_path)\n                    \n                    # Verify the file was created and has content\n                    if os.path.exists(temp_path) and os.path.getsize(temp_path) > 0:\n                        # Read with codecs to ensure proper UTF-8 handling\n                        with codecs.open(temp_path, 'r', encoding='utf-8', errors='replace') as temp_f:\n                            content = temp_f.read()\n                        \n                        # Write to final destination with codecs for explicit UTF-8\n                        with codecs.open(filepath, 'w', encoding='utf-8') as final_f:\n                            final_f.write(content)\n                    else:\n                        raise Exception(\"MAIDR save_html produced no output or empty file\")\n                        \n                except Exception as maidr_error:\n                    print(f\"Monkey-patched maidr.save_html failed: {maidr_error}\")\n                    \n                    # Fallback: try saving with maidr to a different temp file and post-process\n                    temp_path_fallback = temp_path + \"_fallback\"\n                    \n                    try:\n                        # Let maidr save however it wants to the fallback path\n                        maidr.save_html(fig, temp_path_fallback)\n                        \n                        # Read the file and re-encode as UTF-8\n                        # Try multiple encodings to read the file\n                        content = None\n                        for encoding in ['utf-8', 'cp1252', 'latin1', 'ascii']:\n                            try:\n                                with open(temp_path_fallback, 'r', encoding=encoding, errors='replace') as f:\n                                    content = f.read()\n                                break\n                            except UnicodeDecodeError:\n                                continue\n                        \n                        if content is None:\n                            raise Exception(\"Could not read saved HTML file with any encoding\")\n                        \n                        # Write to final destination with explicit UTF-8\n                        with codecs.open(filepath, 'w', encoding='utf-8') as final_f:\n                            final_f.write(content)\n                        \n                        # Clean up fallback temp file\n                        try:\n                            os.unlink(temp_path_fallback)\n                        except:\n                            pass\n                            \n                    except Exception as fallback_error:\n                        print(f\"Fallback approach also failed: {fallback_error}\")\n                        raise Exception(f\"All encoding workarounds failed: {maidr_error}, {fallback_error}\")\n                        \n                finally:\n                    # Clean up temp file\n                    try:\n                        os.unlink(temp_path)\n                    except:\n                        pass\n                        \n            finally:\n                # Restore original open function\n                builtins.open = original_open\n                    \n    finally:\n        # Restore original stdout/stderr\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\nfrom plots.scatterplot import create_scatterplot, create_custom_scatterplot\nfrom plots.barplot import create_barplot, create_custom_barplot\nfrom plots.lineplot import create_lineplot, create_custom_lineplot\nfrom plots.heatmap import create_heatmap, create_custom_heatmap\nfrom plots.multilineplot import generate_multiline_data, create_multiline_plot, create_custom_multiline_plot\nfrom plots.multilayerplot import create_multilayer_plot, create_custom_multilayer_plot\nfrom plots.multipanelplot import create_multipanel_plot, create_custom_multipanel_plot\nfrom plots.candlestick import create_candlestick\n\n# Import help menu module\nfrom HelpMenu import get_help_modal, QUICK_HELP_TIPS\n\n# Set random seed\nnp.random.seed(1000)\n\n# Define the UI components for the Shiny application with tabs and sidebar\napp_ui = ui.page_fluid(\n    # Head content for custom CSS and JavaScript\n    ui.head_content(\n        ui.tags.style(\n            \"\"\"\n            body.dark-theme { background-color: #2E2E2E; color: white; }\n            body.light-theme { background-color: white; color: black; }\n            .sr-only {\n                position: absolute;\n                width: 1px;\n                height: 1px;\n                padding: 0;\n                margin: -1px;\n                overflow: hidden;\n                clip: rect(0, 0, 0, 0);\n                white-space: nowrap;\n                border: 0;\n            }\n            #aria-announcements {\n                position: absolute;\n                left: -10000px;\n                width: 1px;\n                height: 1px;\n                overflow: hidden;\n            }\n            .embed-modal {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.5);\n                z-index: 1000;\n                display: none;\n            }\n            .embed-modal-content {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                background-color: white;\n                padding: 20px;\n                border-radius: 8px;\n                max-width: 80%;\n                max-height: 80%;\n                width: 600px;\n                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            }\n            .embed-modal-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 15px;\n                border-bottom: 1px solid #dee2e6;\n                padding-bottom: 10px;\n            }\n            .embed-modal-body textarea {\n                width: 100%;\n                height: 300px;\n                font-family: 'Courier New', monospace;\n                font-size: 12px;\n                border: 1px solid #ccc;\n                padding: 10px;\n                resize: vertical;\n            }\n            .embed-modal-footer {\n                margin-top: 15px;\n                text-align: right;\n            }\n            .embed-modal-footer button {\n                margin-left: 10px;\n            }\n        \"\"\"\n        ),\n        ui.tags.script(\n            \"\"\"\n            Shiny.addCustomMessageHandler(\"update_theme\", function(theme) {\n                document.body.classList.toggle(\"dark-theme\", theme === \"Dark\");\n                document.body.classList.toggle(\"light-theme\", theme === \"Light\");\n                \n                // Announce theme change\n                var announcement = \"Theme changed to \" + theme + \" mode\";\n                announceToScreenReader(announcement);\n            });\n            \n            Shiny.addCustomMessageHandler(\"announce\", function(message) {\n                announceToScreenReader(message);\n            });\n            \n            Shiny.addCustomMessageHandler(\"show_help\", function(message) {\n                // Trigger the help modal\n                Shiny.setInputValue(\"show_help_modal\", Math.random());\n            });\n            \n            Shiny.addCustomMessageHandler(\"download_file\", function(data) {\n                console.log('Download triggered for:', data.filename);\n                \n                try {\n                    // Determine MIME type (default to HTML if not provided)\n                    var mimeType = data.mime_type || 'text/html;charset=utf-8';\n                    // Create a blob from the content\n                    var blob = new Blob([data.content], { type: mimeType });\n                    console.log('Blob created:', blob.size, 'bytes');\n                    \n                    // Check if the browser supports the download attribute\n                    if (typeof document.createElement('a').download !== 'undefined') {\n                        console.log('Using download attribute method');\n                        \n                        // Create a download link\n                        var link = document.createElement('a');\n                        var url = window.URL.createObjectURL(blob);\n                        link.href = url;\n                        link.download = data.filename;\n                        link.style.display = 'none';\n                        \n                        // Add to document\n                        document.body.appendChild(link);\n                        console.log('Link added to document');\n                        \n                        // Trigger click immediately\n                        link.click();\n                        console.log('Link clicked');\n                        \n                        // Clean up after a short delay\n                        setTimeout(function() {\n                            try {\n                                document.body.removeChild(link);\n                                window.URL.revokeObjectURL(url);\n                                console.log('Cleanup completed');\n                            } catch (e) {\n                                console.log('Cleanup error:', e);\n                            }\n                        }, 1000);\n                        \n                    } else {\n                        console.log('Using fallback method');\n                        // Fallback for older browsers\n                        var url = window.URL.createObjectURL(blob);\n                        var newWindow = window.open(url, '_blank');\n                        if (!newWindow) {\n                            console.log('Popup blocked, trying alternative');\n                            // If popup is blocked, try alternative\n                            window.location.href = url;\n                        }\n                        setTimeout(function() {\n                            window.URL.revokeObjectURL(url);\n                        }, 1000);\n                    }\n                    \n                    announceToScreenReader('Download started: ' + data.filename);\n                    \n                    // Visual alert for users\n                    try {\n                        var alertDiv = document.createElement('div');\n                        alertDiv.className = 'alert alert-success alert-dismissible fade show';\n                        alertDiv.setAttribute('role', 'alert');\n                        alertDiv.style.position = 'fixed';\n                        alertDiv.style.top = '20px';\n                        alertDiv.style.right = '20px';\n                        alertDiv.style.zIndex = 2000;\n                        alertDiv.textContent = '\u2713 ' + data.filename + ' downloaded';\n\n                        var closeBtn = document.createElement('button');\n                        closeBtn.type = 'button';\n                        closeBtn.className = 'btn-close';\n                        closeBtn.setAttribute('aria-label', 'Close');\n                        closeBtn.addEventListener('click', function() {\n                            alertDiv.remove();\n                        });\n                        alertDiv.appendChild(closeBtn);\n\n                        document.body.appendChild(alertDiv);\n                        // Auto-dismiss after 4 s\n                        setTimeout(function() {\n                            try { alertDiv.classList.remove('show'); alertDiv.remove(); } catch(e) {}\n                        }, 4000);\n                    } catch(e) {\n                        console.log('Could not create visual alert', e);\n                    }\n                    \n                } catch (e) {\n                    console.error('Download error:', e);\n                    announceToScreenReader('Download failed: ' + e.message);\n                }\n            });\n            \n            Shiny.addCustomMessageHandler(\"copy_text_to_clipboard\", function(text) {\n                try {\n                    navigator.clipboard.writeText(text).then(function() {\n                        announceToScreenReader('Embed code copied to clipboard');\n                        // Visual toast\n                        var toast = document.createElement('div');\n                        toast.className = 'alert alert-info alert-dismissible fade show';\n                        toast.setAttribute('role', 'alert');\n                        toast.style.position = 'fixed';\n                        toast.style.top = '20px';\n                        toast.style.right = '20px';\n                        toast.style.zIndex = 2000;\n                        toast.textContent = 'Embed code copied to clipboard';\n                        var closeBtn = document.createElement('button');\n                        closeBtn.type = 'button';\n                        closeBtn.className = 'btn-close';\n                        closeBtn.setAttribute('aria-label', 'Close');\n                        closeBtn.addEventListener('click', function() { toast.remove(); });\n                        toast.appendChild(closeBtn);\n                        document.body.appendChild(toast);\n                        setTimeout(function(){ try{toast.classList.remove('show'); toast.remove();}catch(e){} }, 4000);\n                    });\n                } catch(e) {\n                    console.error('Clipboard copy failed', e);\n                    announceToScreenReader('Failed to copy embed code');\n                }\n            });\n            \n            Shiny.addCustomMessageHandler(\"show_embed_modal\", function(embedCode) {\n                // Trigger showing the embed modal in Shiny\n                Shiny.setInputValue(\"embed_code_content\", embedCode);\n                Shiny.setInputValue(\"show_embed_modal_trigger\", Math.random());\n            });\n            \n            function announceToScreenReader(message) {\n                var ariaLive = document.getElementById('aria-announcements');\n                if (!ariaLive) {\n                    ariaLive = document.createElement('div');\n                    ariaLive.id = 'aria-announcements';\n                    ariaLive.setAttribute('aria-live', 'polite');\n                    ariaLive.setAttribute('aria-atomic', 'true');\n                    ariaLive.style.position = 'absolute';\n                    ariaLive.style.left = '-10000px';\n                    ariaLive.style.width = '1px';\n                    ariaLive.style.height = '1px';\n                    ariaLive.style.overflow = 'hidden';\n                    document.body.appendChild(ariaLive);\n                }\n                \n                // Clear previous message and add new one\n                ariaLive.textContent = '';\n                setTimeout(function() {\n                    ariaLive.textContent = message;\n                }, 100);\n            }\n            \n            // Announce when plots are loaded\n            document.addEventListener('DOMContentLoaded', function() {\n                // Watch for plot updates\n                var observer = new MutationObserver(function(mutations) {\n                    mutations.forEach(function(mutation) {\n                        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n                            for (var i = 0; i < mutation.addedNodes.length; i++) {\n                                var node = mutation.addedNodes[i];\n                                if (node.nodeType === 1) { // Element node\n                                    if (node.querySelector && node.querySelector('svg, canvas, img')) {\n                                        announceToScreenReader('Plot has been updated and is now available for exploration');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                });\n                \n                // Start observing\n                observer.observe(document.body, {\n                    childList: true,\n                    subtree: true\n                });\n                \n                // Add keyboard event listener for help menu\n                document.addEventListener('keydown', function(event) {\n                    var activeElement = document.activeElement;\n                    var isInputField = activeElement && (\n                        activeElement.tagName === 'INPUT' || \n                        activeElement.tagName === 'TEXTAREA' || \n                        activeElement.tagName === 'SELECT' ||\n                        activeElement.isContentEditable\n                    );\n                    \n                    // Check if 'h' key is pressed (not in input fields)\n                    if (event.key === 'h' || event.key === 'H') {\n                        // Only trigger help if not in an input field\n                        if (!isInputField) {\n                            event.preventDefault();\n                            \n                            // Check if help modal is currently open\n                            var helpModal = document.querySelector('#help_modal');\n                            var isModalOpen = helpModal && helpModal.style.display !== 'none' && \n                                            helpModal.classList.contains('show');\n                            \n                            if (isModalOpen) {\n                                // If modal is open, close it\n                                Shiny.setInputValue(\"close_help\", Math.random());\n                                announceToScreenReader('Help menu closed.');\n                            } else {\n                                // If modal is closed, open it\n                                Shiny.setInputValue(\"show_help_modal\", Math.random());\n                                announceToScreenReader('Help menu opened. Use Tab to navigate through help sections.');\n                            }\n                        }\n                    }\n                    \n                    // Check if ESC key is pressed to close help menu\n                    if (event.key === 'Escape') {\n                        var helpModal = document.querySelector('#help_modal');\n                        var isModalOpen = helpModal && helpModal.style.display !== 'none' && \n                                        helpModal.classList.contains('show');\n                        \n                        if (isModalOpen) {\n                            event.preventDefault();\n                            Shiny.setInputValue(\"close_help\", Math.random());\n                            announceToScreenReader('Help menu closed.');\n                        }\n                    }\n                });\n            });\n        \"\"\"\n        ),\n    ),\n    # ARIA live region for announcements\n    ui.div(\n        id=\"aria-announcements\",\n        role=\"status\",\n        **{\"aria-live\": \"polite\", \"aria-atomic\": \"true\"},\n        class_=\"sr-only\"\n    ),\n    ui.navset_tab(\n        ui.nav_menu(\n            \"Settings\",\n            ui.nav_control(\n                ui.input_select(\n                    \"theme\", \n                    \"Theme:\", \n                    choices=[\"Light\", \"Dark\"], \n                    selected=\"Light\"\n                )\n            ),\n            ui.nav_control(\n                ui.div(\n                    ui.input_action_button(\n                        \"help_button\",\n                        \"\ud83d\udcda Help (h)\",\n                        class_=\"btn btn-info\",\n                        title=\"Open help menu - keyboard shortcut: press 'h'\"\n                    ),\n                    style=\"display: flex; gap: 10px; margin-top: 10px;\"\n                )\n            ),\n        ),\n        # Fifth tab: Practice tab with file upload, data types, and custom plot creation\n        ui.nav_panel(\n            \"Create your own Custom Plot\",\n            ui.row(\n                # Left column for file upload, table, and conditional dropdowns (40% width)\n                ui.column(\n                    2,\n                    ui.input_file(\"file_upload\", \"Upload CSV File\", accept=\".csv\"),\n                    ui.output_table(\"data_types\"),\n                    ui.output_ui(\"plot_options\"),  # Conditionally render dropdowns\n                    ui.output_ui(\"variable_input\"),  # Variable input for specific plot\n                ),\n                # Right column for the plot (80% width)\n                ui.column(10, \n                    ui.div(\n                        ui.input_action_button(\n                            \"download_graphics_custom\",\n                            \"Download Graphics\",\n                            class_=\"btn btn-primary\",\n                        ),\n                        ui.input_action_button(\n                            \"download_html_custom\",\n                            \"Download Multimodal Plot\",\n                            class_=\"btn btn-secondary\",\n                        ),\n                        ui.input_action_button(\n                            \"embed_code_button_custom\",\n                            \"Embed Code\",\n                            class_=\"btn btn-success\",\n                            aria_label=\"Get embed code for your website\",\n                        ),\n                        class_=\"text-center mb-3\",\n                        style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n                    ),\n                    ui.div(\n                        ui.output_ui(\"create_custom_plot\"),\n                        style=\"width: 100%; max-width: 800px;\"\n                    )\n                ),\n            ),\n        ),\n        # First tab: Histogram with dropdowns and plot\n        ui.nav_panel(\n            \"Histogram\",\n            ui.input_select(\n                \"distribution_type\",\n                \"Select histogram distribution type:\",\n                choices=[\n                    \"Normal Distribution\",\n                    \"Positively Skewed\",\n                    \"Negatively Skewed\",\n                    \"Unimodal Distribution\",\n                    \"Bimodal Distribution\",\n                    \"Multimodal Distribution\",\n                ],\n                selected=\"Normal Distribution\",\n            ),\n            ui.input_select(\n                \"hist_color\",\n                \"Select histogram color:\",\n                choices=list(color_palettes.keys()),\n                selected=\"Default\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_histogram\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_histogram\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_histogram\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_histogram_output\"),\n        ),\n        # Second tab: Box Plot with a single variable for Tutorial\n        ui.nav_panel(\n            \"Box Plot\",\n            ui.input_select(\n                \"boxplot_type\",\n                \"Select box plot type:\",\n                choices=[\n                    \"Positively Skewed with Outliers\",\n                    \"Negatively Skewed with Outliers\",\n                    \"Symmetric with Outliers\",\n                    \"Symmetric without Outliers\",\n                ],\n                selected=\"Positively Skewed with Outliers\",\n            ),\n            ui.input_select(\n                \"boxplot_color\",\n                \"Select box plot color:\",\n                choices=list(color_palettes.keys()),\n                selected=\"Default\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_boxplot\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_boxplot\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_boxplot\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_boxplot_output\"),\n        ),\n        # Third tab: Scatter Plot with dropdowns and plot\n        ui.nav_panel(\n            \"Scatter Plot\",\n            ui.input_select(\n                \"scatterplot_type\",\n                \"Select scatter plot type:\",\n                choices=[\n                    \"No Correlation\",\n                    \"Weak Positive Correlation\",\n                    \"Strong Positive Correlation\",\n                    \"Weak Negative Correlation\",\n                    \"Strong Negative Correlation\",\n                ],\n                selected=\"No Correlation\",\n            ),\n            ui.input_select(\n                \"scatter_color\",\n                \"Select scatter plot color:\",\n                choices=list(color_palettes.keys()),\n                selected=\"Default\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_scatter\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_scatter\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_scatter\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_scatterplot_output\"),\n        ),\n        # Fourth tab: Bar Plot with dropdowns and plot\n        ui.nav_panel(\n            \"Bar Plot\",\n            ui.input_select(\n                \"barplot_color\",\n                \"Select bar plot color:\",\n                choices=list(color_palettes.keys()),\n                selected=\"Default\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_barplot\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_barplot\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_barplot\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_barplot_output\"),\n        ),\n        # New tab: Line Plot\n        ui.nav_panel(\n            \"Line Plot\",\n            ui.input_select(\n                \"lineplot_type\",\n                \"Select line plot type:\",\n                choices=[\n                    \"Linear Trend\",\n                    \"Exponential Growth\",\n                    \"Sinusoidal Pattern\",\n                    \"Random Walk\",\n                ],\n                selected=\"Linear Trend\",\n            ),\n            ui.input_select(\n                \"lineplot_color\",\n                \"Select line plot color:\",\n                choices=list(color_palettes.keys()),\n                selected=\"Default\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_lineplot\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_lineplot\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_lineplot\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_lineplot_output\"),\n        ),\n        # New tab: Heatmap\n        ui.nav_panel(\n            \"Heatmap\",\n            ui.input_select(\n                \"heatmap_type\",\n                \"Select heatmap type:\",\n                choices=[\n                    \"Random\",\n                    \"Correlated\",\n                    \"Checkerboard\",\n                ],\n                selected=\"Random\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_heatmap\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_heatmap\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_heatmap\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_heatmap_output\"),\n        ),\n        # New tab: Multiline Plot\n        ui.nav_panel(\n            \"Multiline Plot\",\n            ui.input_select(\n                \"multiline_type\",\n                \"Select multiline plot type:\",\n                choices=[\n                    \"Simple Trends\",\n                    \"Seasonal Patterns\",\n                    \"Growth Comparison\",\n                    \"Random Series\",\n                ],\n                selected=\"Simple Trends\",\n            ),\n            ui.input_select(\n                \"multiline_color\",\n                \"Select color palette:\",\n                choices=[\"Default\", \"Colorful\", \"Pastel\", \"Dark Tones\", \"Paired Colors\", \"Rainbow\"],\n                selected=\"Default\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_multiline\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_multiline\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_multiline\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_multiline_plot_output\"),\n        ),\n        # New tab: Multilayer Plot\n        ui.nav_panel(\n            \"Multilayer Plot\",\n            ui.input_select(\n                \"multilayer_background_type\",\n                \"Select background plot type:\",\n                choices=[\n                    \"Bar Plot\",\n                    \"Histogram\",\n                    \"Scatter Plot\"\n                ],\n                selected=\"Bar Plot\",\n            ),\n            ui.input_select(\n                \"multilayer_background_color\",\n                \"Select background color:\",\n                choices=list(color_palettes.keys()),\n                selected=\"Default\",\n            ),\n            ui.input_select(\n                \"multilayer_line_color\",\n                \"Select line color:\",\n                choices=list(color_palettes.keys()),\n                selected=\"Default\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_multilayer\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_multilayer\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_multilayer\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_multilayer_plot_output\"),\n        ),\n        \n        # New tab: Multipanel Plot\n        ui.nav_panel(\n            \"Multipanel Plot\",\n            ui.p(\"Three-panel plot with line plot and bar plots\"),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_multipanel\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_multipanel\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_multipanel\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_multipanel_plot_output\"),\n        ),\n        \n        # New tab: Candlestick Chart\n        ui.nav_panel(\n            \"Candlestick Chart\",\n            ui.input_select(\n                \"candlestick_company\",\n                \"Select company:\",\n                choices=[\n                    \"Tesla\",\n                    \"Apple\", \n                    \"NVIDIA\",\n                    \"Microsoft\",\n                    \"Google\",\n                    \"Amazon\",\n                ],\n                selected=\"Tesla\",\n            ),\n            ui.input_select(\n                \"candlestick_timeframe\",\n                \"Select timeframe:\",\n                choices=[\n                    \"Daily\",\n                    \"Monthly\",\n                    \"Yearly\",\n                ],\n                selected=\"Daily\",\n            ),\n            ui.div(\n                ui.input_action_button(\n                    \"download_graphics_candlestick\",\n                    \"Download Graphics\",\n                    class_=\"btn btn-primary\",\n                ),\n                ui.input_action_button(\n                    \"download_html_candlestick\",\n                    \"Download Multimodal Plot\",\n                    class_=\"btn btn-secondary\",\n                ),\n                ui.input_action_button(\n                    \"embed_code_button_candlestick\",\n                    \"Embed Code\",\n                    class_=\"btn btn-success\",\n                    aria_label=\"Get embed code for your website\",\n                ),\n                class_=\"text-center mb-3\",\n                style=\"display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;\"\n            ),\n            ui.output_ui(\"create_candlestick_output\"),\n        ),\n        \n    ),\n)\n\n\n# Define the server logic\ndef server(input, output, session):\n    uploaded_data = reactive.Value(None)\n    # Add a reactive value to store multiline plot data\n    multiline_data = reactive.Value(None)\n    # Add reactive value to store the current figure\n    current_figure = reactive.Value(None)\n    # Add reactive value to store the current maidr object\n    current_maidr = reactive.Value(None)\n    \n    # Reactive value to store the last saved file path\n    last_saved_file = reactive.Value(None)\n\n    # Helper function to announce messages to screen readers\n    async def announce_to_screen_reader(message):\n        \"\"\"Send ARIA announcements to screen readers\"\"\"\n        await session.send_custom_message(\"announce\", message)\n\n    # Handle help modal display\n    @reactive.effect\n    @reactive.event(input.show_help_modal)\n    async def show_help():\n        \"\"\"Display the help modal when triggered\"\"\"\n        modal = get_help_modal()\n        ui.modal_show(modal)\n        await announce_to_screen_reader(\"Help menu is now open. Navigate through sections using Tab key.\")\n\n    # Handle help modal close\n    @reactive.effect\n    @reactive.event(input.close_help)\n    async def close_help():\n        \"\"\"Close the help modal\"\"\"\n        ui.modal_remove()\n        await announce_to_screen_reader(\"Help menu closed. You can press 'h' anytime to reopen it.\")\n\n    # Handle help button click\n    @reactive.effect\n    @reactive.event(input.help_button)\n    async def help_button_clicked():\n        \"\"\"Show help modal when help button is clicked\"\"\"\n        modal = get_help_modal()\n        ui.modal_show(modal)\n        await announce_to_screen_reader(\"Help menu opened via button click. Navigate through sections using Tab key.\")\n\n    # Generic function to handle embed code generation for any tab\n    async def handle_embed_code_generation():\n        \"\"\"Generate embed code with full HTML content that preserves MAIDR functionality\"\"\"\n        try:\n            # Get the current figure\n            fig = current_figure.get()\n            if fig is None:\n                fig = plt.gcf()\n            \n            if not fig or not fig.get_axes():\n                await announce_to_screen_reader(\"No plot available to generate embed code\")\n                return\n            \n            # Generate HTML content using the same logic as download - this works!\n            temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False)\n            temp_filepath = temp_file.name\n            temp_file.close()\n            \n            try:\n                # Use the same save_html_utf8 function that works for downloads\n                print(f\"Saving MAIDR HTML using save_html_utf8 function\")\n                save_html_utf8(fig, temp_filepath)\n                \n                # Read the HTML content with explicit UTF-8 encoding\n                with open(temp_filepath, 'r', encoding='utf-8', errors='replace') as f:\n                    html_content = f.read()\n                \n                print(f\"Generated HTML content length: {len(html_content)}\")\n                \n                # Extract only the inner content (div with link, script, and SVG) for embedding\n                # This excludes DOCTYPE, html, head, and body tags\n                embed_code = extract_embed_content(html_content)\n                \n                print(f\"Generated embed code length: {len(embed_code)}\")\n                \n                # Send the full HTML code to client side\n                await session.send_custom_message(\"show_embed_modal\", embed_code)\n                await announce_to_screen_reader(\"Embed code modal opened with secure iframe ready to copy. Contains sandboxed content with full MAIDR accessibility.\")\n                \n            finally:\n                # Clean up temp file\n                try:\n                    os.unlink(temp_filepath)\n                except:\n                    pass\n                    \n        except Exception as e:\n            await announce_to_screen_reader(f\"Error generating embed code: {str(e)}\")\n            print(f\"Embed code generation error: {e}\")\n            import traceback\n            traceback.print_exc()\n\n    # Handle embed code button clicks for all tabs\n    @reactive.effect\n    @reactive.event(input.embed_code_button_custom)\n    async def embed_code_button_custom_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_histogram)\n    async def embed_code_button_histogram_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_boxplot)\n    async def embed_code_button_boxplot_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_scatter)\n    async def embed_code_button_scatter_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_barplot)\n    async def embed_code_button_barplot_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_lineplot)\n    async def embed_code_button_lineplot_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_heatmap)\n    async def embed_code_button_heatmap_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_multiline)\n    async def embed_code_button_multiline_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_multilayer)\n    async def embed_code_button_multilayer_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_multipanel)\n    async def embed_code_button_multipanel_clicked():\n        await handle_embed_code_generation()\n\n    @reactive.effect\n    @reactive.event(input.embed_code_button_candlestick)\n    async def embed_code_button_candlestick_clicked():\n        await handle_embed_code_generation()\n\n    # Store embed code content\n    embed_code_content = reactive.Value(\"\")\n\n    # Handle showing embed modal\n    @reactive.effect\n    @reactive.event(input.show_embed_modal_trigger)\n    async def show_embed_modal():\n        \"\"\"Show embed code modal\"\"\"\n        embed_code = getattr(input, 'embed_code_content', lambda: \"\")()\n        if embed_code:\n            embed_code_content.set(embed_code)\n            modal = ui.modal(\n                ui.h3(\"Embed Code\"),\n                ui.div(\n                    ui.p(\"Iframe embed code (sandboxed and secure):\"),\n                    ui.input_text_area(\n                        \"embed_code_display\",\n                        \"\",\n                        value=embed_code,\n                        rows=15,\n                        width=\"100%\"\n                    ),\n                ),\n                footer=ui.div(\n                    ui.input_action_button(\"copy_embed_button\", \"Copy to Clipboard\", class_=\"btn btn-primary\"),\n                    ui.modal_button(\"Close\")\n                ),\n                size=\"l\",\n                easy_close=True\n            )\n            ui.modal_show(modal)\n            await announce_to_screen_reader(\"Embed code modal opened with secure iframe that preserves all MAIDR accessibility features. Ready to copy and paste.\")\n\n    # Copy-to-clipboard handler\n    @reactive.effect\n    @reactive.event(input.copy_embed_button)\n    async def copy_embed_to_clipboard():\n        code = embed_code_content.get()\n        if code:\n            await session.send_custom_message(\"copy_text_to_clipboard\", code)\n            await announce_to_screen_reader(\"Embed code copied to clipboard\")\n\n    # Update the theme based on the selected option\n    @reactive.effect\n    @reactive.event(input.theme)\n    async def update_theme():\n        await session.send_custom_message(\"update_theme\", input.theme())\n\n    # Generic function to create HTML content and trigger download\n    async def trigger_html_download(plot_type_suffix):\n        \"\"\"Generate HTML content and trigger browser download with save dialog\"\"\"\n        try:\n            # Get the current figure\n            fig = current_figure.get()\n            if fig is None:\n                fig = plt.gcf()\n            \n            if not fig or not fig.get_axes():\n                await announce_to_screen_reader(\"No plot available to download\")\n                return\n            \n            # Create temporary file\n            temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False)\n            temp_filepath = temp_file.name\n            temp_file.close()\n            \n            try:\n                # Save the HTML content with proper UTF-8 encoding\n                save_html_utf8(fig, temp_filepath)\n                \n                # Read the HTML content\n                with open(temp_filepath, 'r', encoding='utf-8') as f:\n                    html_content = f.read()\n                \n                # Generate filename\n                filename = f\"accessible_plot_{plot_type_suffix}_{uuid.uuid4().hex[:8]}.html\"\n                \n                # Send to JavaScript for download\n                await session.send_custom_message(\"download_file\", {\n                    \"content\": html_content,\n                    \"filename\": filename\n                })\n                \n                await announce_to_screen_reader(f\"Download initiated for {filename}\")\n                \n            finally:\n                # Clean up temp file\n                try:\n                    os.unlink(temp_filepath)\n                except:\n                    pass\n                    \n        except Exception as e:\n            await announce_to_screen_reader(f\"Error downloading HTML: {str(e)}\")\n            print(f\"Download HTML error: {e}\")\n\n    # Handle download button clicks for all tabs\n    @reactive.effect\n    @reactive.event(input.download_html_custom)\n    async def download_html_custom_clicked():\n        await trigger_html_download(\"custom\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_histogram)\n    async def download_html_histogram_clicked():\n        await trigger_html_download(\"histogram\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_boxplot)\n    async def download_html_boxplot_clicked():\n        await trigger_html_download(\"boxplot\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_scatter)\n    async def download_html_scatter_clicked():\n        await trigger_html_download(\"scatter\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_barplot)\n    async def download_html_barplot_clicked():\n        await trigger_html_download(\"barplot\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_lineplot)\n    async def download_html_lineplot_clicked():\n        await trigger_html_download(\"lineplot\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_heatmap)\n    async def download_html_heatmap_clicked():\n        await trigger_html_download(\"heatmap\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_multiline)\n    async def download_html_multiline_clicked():\n        await trigger_html_download(\"multiline\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_multilayer)\n    async def download_html_multilayer_clicked():\n        await trigger_html_download(\"multilayer\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_multipanel)\n    async def download_html_multipanel_clicked():\n        await trigger_html_download(\"multipanel\")\n\n    @reactive.effect\n    @reactive.event(input.download_html_candlestick)\n    async def download_html_candlestick_clicked():\n        await trigger_html_download(\"candlestick\")\n\n    # Add remaining reactive effects and output functions here\n    \n    # Histogram plot rendering\n    @output\n    @render_maidr\n    async def create_histogram_output():\n        \"\"\"Create and render histogram plot\"\"\"\n        try:\n            # Explicitly reference all relevant inputs for reactivity\n            distribution_type = input.distribution_type()\n            hist_color = input.hist_color()\n            theme = input.theme()\n            \n            # Announce plot generation\n            await announce_to_screen_reader(f\"Generating {distribution_type.lower()} histogram with {hist_color.lower()} color scheme\")\n            \n            ax = create_histogram(distribution_type, hist_color, theme)\n            print(f\"create_histogram returned: {type(ax)}, value: {ax}\")\n            \n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_histogram returned a list instead of axes object: {type(ax)}, length: {len(ax)}\")\n                    return None\n                \n                # Check if it has the figure attribute\n                if not hasattr(ax, 'figure'):\n                    print(f\"ERROR: create_histogram returned object without figure attribute: {type(ax)}\")\n                    return None\n                    \n                fig = ax.figure\n                current_figure.set(fig)\n                print(f\"Returning to MAIDR: {type(ax)}, axes object: {ax}\")\n                # Return the axes object, not the figure - MAIDR expects the axes\n                return ax\n        except Exception as e:\n            print(f\"Error creating histogram: {e}\")\n            import traceback\n            traceback.print_exc()\n            return None\n    \n    # Box plot rendering\n    @output\n    @render_maidr\n    def create_boxplot_output():\n        \"\"\"Create and render box plot\"\"\"\n        try:\n            ax = create_boxplot(input.boxplot_type(), input.boxplot_color(), input.theme())\n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_boxplot returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating boxplot: {e}\")\n            return None\n    \n    # Scatter plot rendering\n    @output\n    @render_maidr\n    def create_scatterplot_output():\n        \"\"\"Create and render scatter plot\"\"\"\n        try:\n            ax = create_scatterplot(input.scatterplot_type(), input.scatter_color(), input.theme())\n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_scatterplot returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating scatterplot: {e}\")\n            return None\n    \n    # Bar plot rendering\n    @output\n    @render_maidr\n    def create_barplot_output():\n        \"\"\"Create and render bar plot\"\"\"\n        try:\n            ax = create_barplot(input.barplot_color(), input.theme())\n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_barplot returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating barplot: {e}\")\n            return None\n    \n    # Line plot rendering\n    @output\n    @render_maidr\n    def create_lineplot_output():\n        \"\"\"Create and render line plot\"\"\"\n        try:\n            ax = create_lineplot(input.lineplot_type(), input.lineplot_color(), input.theme())\n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_lineplot returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating lineplot: {e}\")\n            return None\n    \n    # Heatmap rendering\n    @output\n    @render_maidr\n    def create_heatmap_output():\n        \"\"\"Create and render heatmap\"\"\"\n        try:\n            ax = create_heatmap(input.heatmap_type(), input.theme())\n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_heatmap returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating heatmap: {e}\")\n            return None\n    \n    # Multiline plot rendering\n    @output\n    @render_maidr\n    def create_multiline_plot_output():\n        \"\"\"Create and render multiline plot\"\"\"\n        try:\n            data = generate_multiline_data(input.multiline_type())\n            multiline_data.set(data)\n            \n            ax = create_multiline_plot(data, input.multiline_type(), input.multiline_color(), input.theme())\n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_multiline_plot returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating multiline plot: {e}\")\n            return None\n    \n    # Multilayer plot rendering\n    @output\n    @render_maidr\n    def create_multilayer_plot_output():\n        \"\"\"Create and render multilayer plot\"\"\"\n        try:\n            ax = create_multilayer_plot(\n                input.multilayer_background_type(), \n                input.multilayer_background_color(), \n                input.multilayer_line_color(), \n                input.theme()\n            )\n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_multilayer_plot returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating multilayer plot: {e}\")\n            return None\n    \n    # Multipanel plot rendering\n    @output\n    @render_maidr\n    def create_multipanel_plot_output():\n        \"\"\"Create and render multipanel plot\"\"\"\n        try:\n            ax = create_multipanel_plot(\"default\", \"default\", input.theme())\n            print(f\"create_multipanel_plot returned: {type(ax)}, value: {ax}\")\n            \n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: create_multipanel_plot returned a list instead of axes object: {type(ax)}, length: {len(ax)}\")\n                    return None\n                \n                # Check if it has the figure attribute\n                if not hasattr(ax, 'figure'):\n                    print(f\"ERROR: create_multipanel_plot returned object without figure attribute: {type(ax)}\")\n                    return None\n                    \n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n        except Exception as e:\n            print(f\"Error creating multipanel plot: {e}\")\n            import traceback\n            traceback.print_exc()\n            return None\n    \n    # Candlestick Chart\n    @output\n    @render_maidr \n    def create_candlestick_output():\n        try:\n            candlestick_company = input.candlestick_company()\n            candlestick_timeframe = input.candlestick_timeframe()\n            theme = input.theme()\n            \n            # Create the candlestick plot\n            ax = create_candlestick(candlestick_company, candlestick_timeframe, theme)\n            \n            if ax is None:\n                return None\n                \n            # Store the current figure for HTML saving using plt.gcf()\n            current_figure.set(plt.gcf())\n            \n            # For MAIDR rendering, return the axes object directly\n            return ax\n            \n        except Exception as e:\n            return None\n\n    # File upload handling\n    @reactive.effect\n    @reactive.event(input.file_upload)\n    async def handle_file_upload():\n        \"\"\"Handle CSV file upload\"\"\"\n        if input.file_upload() is not None:\n            try:\n                file_info = input.file_upload()[0]\n                df = pd.read_csv(file_info[\"datapath\"])\n                uploaded_data.set(df)\n                await announce_to_screen_reader(f\"File uploaded successfully with {len(df)} rows and {len(df.columns)} columns\")\n            except Exception as e:\n                await announce_to_screen_reader(f\"Error uploading file: {str(e)}\")\n                print(f\"File upload error: {e}\")\n\n    # Data types table\n    @output\n    @render.table\n    def data_types():\n        \"\"\"Display data types of uploaded file\"\"\"\n        df = uploaded_data.get()\n        if df is not None:\n            summary = pd.DataFrame({\n                'Column': df.columns,\n                'Type': [str(df[col].dtype) for col in df.columns],\n                'Non-null': [df[col].count() for col in df.columns]\n            })\n            return summary\n        return pd.DataFrame()\n\n    # Plot options dropdown\n    @output\n    @render.ui\n    def plot_options():\n        \"\"\"Render plot type selection dropdown\"\"\"\n        df = uploaded_data.get()\n        if df is not None:\n            return ui.input_select(\n                \"plot_type\",\n                \"Select plot type:\",\n                choices=[\"\"] + [\n                    \"Histogram\",\n                    \"Box Plot\", \n                    \"Scatter Plot\",\n                    \"Bar Plot\",\n                    \"Line Plot\",\n                    \"Heatmap\"\n                ]\n            )\n        return ui.div()\n\n    # Variable input based on plot type\n    @output\n    @render.ui\n    def variable_input():\n        \"\"\"Render variable selection based on plot type\"\"\"\n        df = uploaded_data.get()\n        plot_type = getattr(input, 'plot_type', lambda: None)()\n        \n        if df is not None and plot_type:\n            # Robust dtype detection \u2013 numeric vs non-numeric\n            numeric_cols = df.select_dtypes(include='number').columns.tolist()\n            categorical_cols = df.select_dtypes(exclude='number').columns.tolist()\n            \n            if plot_type == \"Histogram\":\n                return ui.div(\n                    ui.input_select(\"var_x\", \"Select numeric variable:\", choices=[\"\"] + numeric_cols),\n                    ui.input_select(\"hist_custom_color\", \"Select color:\", choices=list(color_palettes.keys()), selected=\"Default\")\n                )\n            elif plot_type == \"Box Plot\":\n                return ui.div(\n                    ui.input_select(\"var_x\", \"Select numeric variable:\", choices=[\"\"] + numeric_cols),\n                    ui.input_select(\"var_y\", \"Select grouping variable (optional):\", choices=[\"None\"] + categorical_cols, selected=\"None\"),\n                    ui.input_select(\"boxplot_custom_color\", \"Select color:\", choices=list(color_palettes.keys()), selected=\"Default\")\n                )\n            elif plot_type == \"Scatter Plot\":\n                # Provide all numeric columns for both axes (allow same variable)\n                y_choices = numeric_cols\n                return ui.div(\n                    ui.input_select(\"var_x\", \"Select X variable:\", choices=[\"\"] + numeric_cols),\n                    ui.input_select(\"var_y\", \"Select Y variable:\", choices=[\"\"] + y_choices),\n                    ui.input_select(\"scatter_custom_color\", \"Select color:\", choices=list(color_palettes.keys()), selected=\"Default\")\n                )\n            elif plot_type == \"Bar Plot\":\n                return ui.div(\n                    ui.input_select(\"var_x\", \"Select categorical variable:\", choices=[\"\"] + categorical_cols),\n                    ui.input_select(\"barplot_custom_color\", \"Select color:\", choices=list(color_palettes.keys()), selected=\"Default\")\n                )\n            elif plot_type == \"Line Plot\":\n                # Provide all numeric columns for both axes (allow same variable)\n                y_choices = numeric_cols\n                return ui.div(\n                    ui.input_select(\"var_x\", \"Select X variable:\", choices=[\"\"] + numeric_cols),\n                    ui.input_select(\"var_y\", \"Select Y variable:\", choices=[\"\"] + y_choices),\n                    ui.input_select(\"lineplot_custom_color\", \"Select color:\", choices=list(color_palettes.keys()), selected=\"Default\")\n                )\n            elif plot_type == \"Heatmap\":\n                return ui.div(\n                    ui.input_select(\"var_x\", \"Select X (categorical):\", choices=[\"\"] + categorical_cols),\n                    ui.input_select(\"var_y\", \"Select Y (categorical):\", choices=[\"\"] + categorical_cols),\n                    ui.input_select(\"var_value\", \"Select numeric value (optional):\", choices=[\"None\"] + numeric_cols, selected=\"None\")\n                )\n        return ui.div()\n\n    # Custom plot creation\n    @output\n    @render_maidr\n    def create_custom_plot():\n        \"\"\"Create custom plot based on user data and selections\"\"\"\n        df = uploaded_data.get()\n        plot_type = getattr(input, 'plot_type', lambda: None)()\n        \n        if df is None or not plot_type or plot_type == \"\":\n            return None\n            \n        try:\n            ax = None\n            \n            if plot_type == \"Histogram\" and hasattr(input, 'var_x') and input.var_x() and input.var_x() != \"\":\n                color = color_palettes.get(getattr(input, 'hist_custom_color', lambda: 'Default')(), 'skyblue')\n                ax = create_custom_histogram(df, input.var_x(), color, input.theme())\n                \n            elif plot_type == \"Box Plot\" and hasattr(input, 'var_x') and input.var_x() and input.var_x() != \"\":\n                color = color_palettes.get(getattr(input, 'boxplot_custom_color', lambda: 'Default')(), 'skyblue')\n                var_y = getattr(input, 'var_y', lambda: 'None')()\n                var_y = None if var_y == 'None' or var_y == \"\" else var_y\n                ax = create_custom_boxplot(df, input.var_x(), var_y, color, input.theme())\n                \n            elif plot_type == \"Scatter Plot\" and hasattr(input, 'var_x') and hasattr(input, 'var_y') and input.var_x() and input.var_y() and input.var_x() != \"\" and input.var_y() != \"\":\n                color = color_palettes.get(getattr(input, 'scatter_custom_color', lambda: 'Default')(), 'skyblue')\n                ax = create_custom_scatterplot(df, input.var_x(), input.var_y(), color, input.theme())\n                \n            elif plot_type == \"Bar Plot\" and hasattr(input, 'var_x') and input.var_x() and input.var_x() != \"\":\n                color = color_palettes.get(getattr(input, 'barplot_custom_color', lambda: 'Default')(), 'skyblue')\n                ax = create_custom_barplot(df, input.var_x(), color, input.theme())\n            \n            elif plot_type == \"Line Plot\" and all(hasattr(input, v) for v in ['var_x','var_y']) and input.var_x() and input.var_y():\n                color = color_palettes.get(getattr(input, 'lineplot_custom_color', lambda: 'Default')(), 'skyblue')\n                ax = create_custom_lineplot(df, input.var_x(), input.var_y(), color, input.theme())\n            \n            elif plot_type == \"Heatmap\" and all(hasattr(input, v) for v in ['var_x','var_y']):\n                var_x = input.var_x()\n                var_y = input.var_y()\n                var_value = getattr(input, 'var_value', lambda: 'None')()\n                var_value = None if var_value == 'None' or var_value == '' else var_value\n                if var_x and var_y and var_x != '' and var_y != '' and var_x != var_y:\n                    ax = create_custom_heatmap(df, var_x, var_y, var_value, 'YlGnBu', input.theme())\n            \n            if ax is not None:\n                # Check if ax is actually an axes object, not a list\n                if isinstance(ax, list):\n                    print(f\"ERROR: Custom plot function returned a list instead of axes object: {type(ax)}\")\n                    return None\n                fig = ax.figure\n                current_figure.set(fig)\n                return ax\n                \n        except Exception as e:\n            print(f\"Error creating custom plot: {e}\")\n            return None\n\n    # Generic SVG download handler and per-tab triggers\n    async def trigger_svg_download(plot_type_suffix):\n        \"\"\"Generate SVG in-memory and send to browser for download.\"\"\"\n        try:\n            fig = current_figure.get()\n            if fig is None:\n                fig = plt.gcf()\n            if not fig or not fig.get_axes():\n                await announce_to_screen_reader(\"No plot available to download\")\n                return\n\n            import io, codecs\n            buffer = io.StringIO()\n            fig.savefig(buffer, format='svg', bbox_inches='tight')\n            svg_content = buffer.getvalue()\n            buffer.close()\n\n            filename = f\"accessible_plot_{plot_type_suffix}_{uuid.uuid4().hex[:8]}.svg\"\n\n            # Send to browser\n            await session.send_custom_message(\"download_file\", {\n                \"content\": svg_content,\n                \"filename\": filename,\n                \"mime_type\": \"image/svg+xml;charset=utf-8\",\n            })\n\n            await announce_to_screen_reader(f\"Download initiated for {filename}\")\n\n        except Exception as e:\n            await announce_to_screen_reader(f\"Error preparing graphics file: {str(e)}\")\n            print(f\"SVG creation error: {e}\")\n\n    # Download Graphics button events for all tabs\n    @reactive.effect\n    @reactive.event(input.download_graphics_custom)\n    async def download_graphics_custom_clicked():\n        await trigger_svg_download(\"custom\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_histogram)\n    async def download_graphics_histogram_clicked():\n        await trigger_svg_download(\"histogram\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_boxplot)\n    async def download_graphics_boxplot_clicked():\n        await trigger_svg_download(\"boxplot\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_scatter)\n    async def download_graphics_scatter_clicked():\n        await trigger_svg_download(\"scatter\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_barplot)\n    async def download_graphics_barplot_clicked():\n        await trigger_svg_download(\"barplot\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_lineplot)\n    async def download_graphics_lineplot_clicked():\n        await trigger_svg_download(\"lineplot\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_heatmap)\n    async def download_graphics_heatmap_clicked():\n        await trigger_svg_download(\"heatmap\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_multiline)\n    async def download_graphics_multiline_clicked():\n        await trigger_svg_download(\"multiline\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_multilayer)\n    async def download_graphics_multilayer_clicked():\n        await trigger_svg_download(\"multilayer\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_multipanel)\n    async def download_graphics_multipanel_clicked():\n        await trigger_svg_download(\"multipanel\")\n\n    @reactive.effect\n    @reactive.event(input.download_graphics_candlestick)\n    async def download_graphics_candlestick_clicked():\n        await trigger_svg_download(\"candlestick\")\n\n    # Add reactive effects to announce changes to screen readers\n    @reactive.effect\n    async def announce_plot_type_change():\n        try:\n            if uploaded_data.get() is not None and hasattr(input, 'plot_type') and input.plot_type() and input.plot_type() != \"\":\n                plot_type = input.plot_type()\n                await announce_to_screen_reader(f\"Plot type changed to {plot_type}. Please select appropriate variables for this plot type.\")\n        except:\n            pass\n    \n    @reactive.effect\n    async def announce_histogram_changes():\n        distribution_type = input.distribution_type()\n        hist_color = input.hist_color()\n        if distribution_type and hist_color:\n            await announce_to_screen_reader(f\"Histogram settings updated: {distribution_type} distribution with {hist_color} colors\")\n\n    @reactive.effect\n    async def announce_boxplot_changes():\n        boxplot_type = input.boxplot_type()\n        boxplot_color = input.boxplot_color()\n        if boxplot_type and boxplot_color:\n            await announce_to_screen_reader(f\"Box plot settings updated: {boxplot_type} with {boxplot_color} colors\")\n\n    @reactive.effect\n    async def announce_scatter_changes():\n        scatterplot_type = input.scatterplot_type()\n        scatter_color = input.scatter_color()\n        if scatterplot_type and scatter_color:\n            await announce_to_screen_reader(f\"Scatter plot settings updated: {scatterplot_type} with {scatter_color} colors\")\n\n# Function to extract embed content from full HTML\ndef extract_embed_content(html_content):\n    \"\"\"Extract div content and wrap in iframe with sandbox for secure embedding\"\"\"\n    import re\n    import html\n    \n    # Find the content between <body> and </body>\n    body_match = re.search(r'<body[^>]*>(.*?)</body>', html_content, re.DOTALL | re.IGNORECASE)\n    \n    if body_match:\n        body_content = body_match.group(1).strip()\n    else:\n        # Fallback: try to find the main div with MAIDR content\n        # Look for the div that contains the link and script\n        div_match = re.search(r'(<div[^>]*>.*?<link.*?maidr.*?<script.*?</script>.*?<div.*?</div>\\s*</div>)', html_content, re.DOTALL | re.IGNORECASE)\n        \n        if div_match:\n            body_content = div_match.group(1).strip()\n        else:\n            # If we can't parse it properly, return an error message\n            return \"<!-- Error: Could not extract embed content from generated HTML -->\"\n    \n    # Create a complete HTML document for the iframe\n    iframe_html = f'''<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body>\n{body_content}\n</body>\n</html>'''\n    \n    # Escape the HTML for use in srcdoc attribute\n    escaped_html = html.escape(iframe_html, quote=True)\n    \n    # Create iframe with sandbox attributes for security\n    # Allow scripts and same-origin for MAIDR functionality while maintaining security\n    iframe_embed = f'''<iframe \n    srcdoc=\"{escaped_html}\"\n    style=\"width: 100%; height: 600px; border: 1px solid #ccc; border-radius: 4px;\"\n    sandbox=\"allow-scripts allow-same-origin\"\n    title=\"Accessible Interactive Plot with MAIDR\">\n</iframe>'''\n    \n    return iframe_embed\n\n# Create the Shiny app\napp = App(app_ui, server)", "type": "text"}, {"name": "HelpMenu.py", "content": "\"\"\"\nHelp Menu Module for A11Y Dashboard\n\nThis module provides comprehensive help content for users to understand\nhow to use the accessibility dashboard effectively.\n\"\"\"\n\nfrom shiny import ui\n\ndef get_help_content():\n    \"\"\"\n    Returns the complete help content as a UI element\n    \"\"\"\n    return ui.div(\n        ui.h2(\"A11Y Dashboard Help Guide\", class_=\"text-center mb-4\"),\n        \n        # Quick Start Section\n        ui.div(\n            ui.h3(\"Quick Start\"),\n            ui.p(\"Create accessible data visualizations with screen reader support and MAIDR integration. Press 'h' to toggle help or ESC to close.\"),\n            ui.p(ui.strong(\"Navigation: \"), \"Tab between elements, Enter/Space to activate, themes in Settings menu.\"),\n            class_=\"mb-4\"\n        ),\n        \n        # CSV Data Structure Section\n        ui.div(\n            ui.h3(\"CSV Data Requirements\"),\n            ui.p(\"Standard CSV files with headers in first row. Numeric columns for quantities, text for categories. Use empty cells for missing data.\"),\n            ui.pre(\n                \"\"\"Name,Age,Department,Salary\nJohn,28,Engineering,75000\nSarah,35,Marketing,68000\"\"\",\n                class_=\"bg-light p-2 border rounded small\"\n            ),\n            class_=\"mb-4\"\n        ),\n        \n        # Dashboard Features Section\n        ui.div(\n            ui.h3(\"Plot Types & Custom Creation\"),\n            ui.p(ui.strong(\"Available plots: \"), \"Histogram, Box Plot, Scatter Plot, Bar Plot, Line Plot, Heatmap, Multiline, Multilayer, Multipanel, Candlestick\"),\n            ui.p(ui.strong(\"Custom workflow: \"), \"Upload CSV \u2192 Select plot type \u2192 Choose variables \u2192 Customize colors \u2192 Generate accessible plot\"),\n            class_=\"mb-4\"\n        ),\n        \n        # Variable Requirements Section\n        ui.div(\n            ui.h3(\"Variable Requirements\"),\n            ui.p(\"Histogram: 1 numeric | Box Plot: 1 numeric + optional categorical | Scatter/Line: 2 numeric | Bar: 1 categorical | Heatmap: 2 categorical + 1 numeric | Multiline: 2 numeric + 1 categorical\"),\n            class_=\"mb-4\"\n        ),\n        \n        # Saving & Accessibility Section\n        ui.div(\n            ui.h3(\"Saving & Accessibility\"),\n            ui.p(ui.strong(\"Save options: \"), \"SVG for publications, HTML for accessible version with MAIDR integration\"),\n            ui.p(ui.strong(\"Accessibility: \"), \"Full keyboard navigation, screen reader support, audio descriptions, dark theme, ARIA announcements\"),\n            class_=\"mb-4\"\n        ),\n        \n        # Troubleshooting Section\n        ui.div(\n            ui.h3(\"Troubleshooting\"),\n            ui.p(\"Plot issues: check variable selection and CSV format. Save issues: generate plot first. Accessibility: try refresh or theme switch.\"),\n            class_=\"mb-4\"\n        ),\n        \n        # Keyboard Shortcuts Section\n        ui.div(\n            ui.h3(\"Keyboard Shortcuts\"),\n            ui.tags.ul(\n                ui.tags.li(ui.strong(\"h: \"), \"Toggle this help menu\"),\n                ui.tags.li(ui.strong(\"ESC: \"), \"Close this help menu\"),\n                ui.tags.li(ui.strong(\"Tab: \"), \"Navigate between elements\"),\n                ui.tags.li(ui.strong(\"Enter/Space: \"), \"Activate buttons\"),\n                ui.tags.li(ui.strong(\"Arrow Keys: \"), \"Navigate dropdowns\")\n            ),\n            class_=\"mb-4\"\n        ),\n        \n        # Footer\n        ui.div(\n            ui.hr(),\n            ui.p(ui.strong(\"Press ESC to close\"), class_=\"text-center\")\n        ),\n        \n        class_=\"help-content p-4\",\n        style=\"max-height: 80vh; overflow-y: auto; background-color: var(--bs-light); border-radius: 8px;\"\n    )\n\ndef get_help_modal():\n    \"\"\"\n    Returns a modal dialog containing the help content\n    \"\"\"\n    return ui.modal(\n        get_help_content(),\n        id=\"help_modal\",\n        size=\"xl\",\n        easy_close=True,\n        footer=ui.div(\n            ui.input_action_button(\n                \"close_help\", \n                \"Close Help (or press 'h')\", \n                class_=\"btn btn-secondary\"\n            ),\n            class_=\"text-center\"\n        )\n    )\n\n# Help content for quick reference tooltips\nQUICK_HELP_TIPS = {\n    \"csv_upload\": \"Upload a CSV file with headers in the first row. Numeric columns for quantities, text columns for categories.\",\n    \"plot_type\": \"Choose the type of visualization based on your data and analysis needs.\",\n    \"variables\": \"Select appropriate variables based on the plot requirements shown in the help menu.\",\n    \"colors\": \"Choose color schemes that work well for your audience and accessibility needs.\",\n    \"save_svg\": \"Save a scalable vector image perfect for presentations and publications.\",\n    \"save_html\": \"Save an accessible web version that works with screen readers and assistive technology.\",\n    \"theme\": \"Switch between light and dark themes for better visibility.\",\n    \"maidr\": \"MAIDR provides audio descriptions and sonification for accessible data exploration.\"\n} ", "type": "text"}, {"name": "README.md", "content": "# Accessibility Dashboard for Data Visualization\n\n## Live Dashboard Access\n\nThe accessibility dashboard is available at the following endpoints:\n\n- **Primary**: https://xabilitylab.shinyapps.io/a11y_dashboard/\n- **Backup**: https://xabilitylab.ischool.illinois.edu/a11y_dashboard/\n\nBoth endpoints are identical from a user\u2019s perspective; the difference lies in how they\u2019re hosted:\n\nPrimary endpoint runs on a remote Python-backed Shiny server (shinyapps.io), offering fast, automatically scaled performance.\n\nBackup endpoint is delivered as a static WebAssembly bundle via Shinylive; everything runs in your browser using Pyodide, with no server backend\u2014may feel slightly slower on older or less powerful machines.\n\n## Dashboard Features\n\n### Overview\nThis interactive dashboard provides accessible data visualization tools that generate plots with MAIDR (Multimodal Access and Interactive Data Representation) support, making visualizations accessible to users with visual impairments through screen readers and sonification.\n\n### Dashboard Tabs\n\n#### 1. Settings\n- **Theme Selection**: Switch between Light and Dark themes for better visual accessibility\n- **Save HTML**: Export accessible HTML versions of plots with embedded MAIDR functionality\n\n#### 2. Create your own Custom Plot\nUpload your own CSV data and create custom visualizations:\n- **File Upload**: Upload CSV files to analyze your own data\n- **Data Type Detection**: Automatic identification of numeric and categorical variables\n- **Plot Type Selection**: Choose from 10 different plot types\n- **Color Customization**: Select from multiple color palettes\n- **Variable Selection**: Dynamic dropdowns for selecting appropriate variables based on plot type\n- **SVG Export**: Save plots as SVG files to Downloads folder\n\n#### 3. Histogram\nGenerate histogram visualizations with options for:\n- **Distribution Types**: Normal, Positively Skewed, Negatively Skewed, Unimodal, Bimodal, Multimodal\n- **Color Options**: Default, Red, Green, Blue, Purple, Orange\n\n#### 4. Box Plot\nCreate box plots with various configurations:\n- **Plot Types**: Positively Skewed with Outliers, Negatively Skewed with Outliers, Symmetric with/without Outliers\n- **Color Customization**: Multiple color palette options\n\n#### 5. Scatter Plot\nGenerate scatter plots showing different correlation patterns:\n- **Correlation Types**: No Correlation, Weak/Strong Positive/Negative Correlation\n- **Color Themes**: Customizable color palettes\n\n#### 6. Bar Plot\nCreate categorical data visualizations:\n- **Color Options**: Multiple color palette choices\n- **Automatic Data Generation**: Uses predefined categorical data for demonstration\n\n#### 7. Line Plot\nGenerate time series and trend visualizations:\n- **Pattern Types**: Linear Trend, Exponential Growth, Sinusoidal Pattern, Random Walk\n- **Color Customization**: Various color options\n\n#### 8. Heatmap\nCreate correlation and intensity visualizations:\n- **Heatmap Types**: Random data, Correlated data, Checkerboard patterns\n- **Built-in Color Scales**: Optimized for accessibility\n\n#### 9. Multiline Plot\nGenerate multiple line series on a single plot:\n- **Series Types**: Simple Trends, Seasonal Patterns, Growth Comparison, Random Series\n- **Color Palettes**: Default, Colorful, Pastel, Dark Tones, Paired Colors, Rainbow\n\n#### 10. Multilayer Plot\nCombine different plot types in layers:\n- **Background Plot Types**: Bar Plot, Histogram, Scatter Plot\n- **Overlay Options**: Line plots over background visualizations\n- **Dual Color Control**: Separate color selection for background and overlay elements\n\n#### 11. Multipanel Plot\nCreate complex multi-subplot visualizations:\n- **Layout**: Three-panel plots combining different visualization types\n- **Automatic Configuration**: Pre-configured line and bar plot combinations\n\n#### 12. Candlestick Chart\nFinancial data visualization tool:\n- **Companies**: Tesla, Apple, NVIDIA, Microsoft, Google, Amazon\n- **Timeframes**: Daily, Monthly, Yearly data views\n- **Financial Metrics**: Open, High, Low, Close price visualization\n\n### Accessibility Features\n- **MAIDR Integration**: All plots include Multimodal Access and Interactive Data Representation\n- **Screen Reader Support**: Compatible with assistive technologies\n- **Keyboard Navigation**: Full keyboard accessibility\n- **Theme Options**: Light and dark themes for visual accessibility\n- **Export Options**: HTML and SVG export capabilities\n\n# Running the Shiny App Locally\n\nThis guide will walk you through setting up and running the Shiny app using Python, based on the structure of your directory.\n\n### Prerequisites\n1. **Python 3.7+**: Ensure you have Python installed. You can check this by running:\n   ```bash\n   python --version\n   ```\n   If you don't have it installed, download Python [here](https://www.python.org/downloads/).\n\n2. **Shiny for Python**: You will need to install `shiny`, which is Posit's package for Python.\n\n3. **Virtual Environment (optional but recommended)**: Using a virtual environment is a good practice to isolate dependencies.\n\n### Steps to Run the App\n\n#### 1. Clone or Navigate to the Directory\nFirst, make sure you are in the directory containing the app files. If you need to clone a GitHub repository, use:\n```bash\ngit clone <repository-url>\ncd <repository-folder>\n```\n\n#### 2. Set up a Virtual Environment (Optional)\nTo avoid dependency conflicts, set up a virtual environment in the directory. \n\n1. **Create a virtual environment**:\n   ```bash\n   python -m venv venv\n   ```\n\n2. **Activate the virtual environment**:\n   - On Windows:\n     ```bash\n     venv\\Scripts\\activate\n     ```\n   - On macOS/Linux:\n     ```bash\n     source venv/bin/activate\n     ```\n\n#### 3. Install Dependencies\nInstall `shiny` and other necessary dependencies specified in the `requirements.txt` file.\n\n1. **Install `shiny`**:\n   ```bash\n   pip install shiny\n   ```\n\n2. **Install the other dependencies**:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n#### 4. Run the App\nOnce all dependencies are installed, you can run the Shiny app.\n\n1. Run the app:\n   ```bash\n   shiny run --reload app.py\n   ```\n\n   The `--reload` option allows for automatic reloading of the app if you make any code changes.\n\n2. After running the command, you should see output like:\n   ```bash\n   Listening on http://127.0.0.1:8000\n   ```\n\n3. Open the provided URL (`http://127.0.0.1:8000`) in your browser to access the Shiny app.\n\n### Additional Notes:\n- **Dummy Data**: The file `dummy_data_for_practice.csv` is included for you to test the app's functionality with dummy data. Please free to use your own data!\n- **VS Code Configuration**: If you use VS Code, you may want to install the `Shiny for Python` extension, which will help you run the app and display the content in an in-window browser.\n\n## Running the Shiny App in the Browser with Shinylive (Pyodide)\n\nYou can run this Shiny for Python app entirely in your browser using [Shinylive](https://shinylive.io/py), which uses Pyodide to run Python code client-side (no server needed).\n\n### Steps to Export and Run with Shinylive\n\n1. **Install Shinylive CLI** (if not already installed):\n   ```bash\n   pip install shinylive\n   ```\n\n2. **Export your app for Shinylive:**\n   ```bash\n   shinylive export . output_dir\n   ```\n   This will create an `output_dir` folder with all the files needed to run your app in the browser.\n\n3. **Serve the exported app with a local HTTP server:**\n   ```bash\n   python3 -m http.server --directory output_dir 8008\n   ```\n   Then open [http://localhost:8008](http://localhost:8008) in your browser.\n\n   > **Note:** Opening `index.html` directly (with `file://`) will NOT work due to browser security restrictions. Always use a local HTTP server.\n\n### What is Shinylive/Pyodide?\n- **Shinylive** lets you run Shiny for Python apps in the browser using **Pyodide** (Python compiled to WebAssembly).\n- All computation happens client-side; no server is required after export.\n", "type": "text"}, {"name": "dummy_data_for_practice.csv", "content": "Age,Income,Education,Employment Status,Happiness Score,Hours of Physical Activity\n69,33332.5583260898,Bachelor,Retired,1.1399946551218259,10\n41,38869.91373987022,PhD,Employed,5.7951410446865435,16\n25,88621.38790607327,High School,Unemployed,2.0730464922055845,3\n18,66098.19985769935,Master,Student,2.028888618929105,1\n48,22007.982403993563,PhD,Retired,7.167282283518435,18\n46,40292.346101620176,Master,Student,3.8284870034414955,12\n19,66233.61211069606,Master,Employed,8.053690375108186,13\n18,52650.05473340253,High School,Unemployed,9.580721208028995,7\n43,37470.076508112244,Master,Retired,6.878566850050573,2\n63,24575.025267241792,High School,Retired,9.9617832491356,9\n58,67001.25846765874,PhD,Unemployed,4.36717896292317,1\n59,65727.96084152858,PhD,Retired,4.6922224089494815,12\n46,18075.11944359935,PhD,Unemployed,4.893353156680095,17\n45,28442.90908126696,Bachelor,Student,5.541976153371458,12\n54,52669.056586257335,High School,Student,7.769168829128651,1\n63,70916.34119428959,High School,Student,3.34479405343761,5\n65,54369.802787196684,High School,Unemployed,4.463380246969471,16\n60,48769.907090410125,PhD,Retired,7.673352397325717,0\n59,59663.63918129501,Bachelor,Retired,5.987623056808238,0\n54,54921.199213743595,Bachelor,Student,6.957439084400549,4\n38,62861.491230587024,PhD,Unemployed,5.018172107706221,2\n68,35945.46079228452,Bachelor,Retired,7.68071582888152,17\n48,52701.12433784628,Master,Unemployed,9.895539497247817,19\n59,28649.44120499459,Bachelor,Employed,2.091123160566185,1\n42,44483.66333212928,PhD,Employed,8.0195953853372,16\n68,27150.680152073037,PhD,Unemployed,5.107538475684221,10\n48,40478.42452239212,High School,Retired,3.4555130403472196,19\n46,64811.05762345411,Master,Employed,9.839508732769492,7\n48,34759.70567710834,PhD,Retired,2.301570838484996,18\n31,80685.85620273493,PhD,Unemployed,4.494799724989527,11\n36,53749.97778139087,Master,Retired,7.025428610492258,7\n46,59767.43794597443,High School,Employed,2.949323265748278,9\n39,31009.646917735987,Master,Employed,3.592193882811355,18\n47,70612.33400119815,Master,Employed,4.899904049168818,13\n28,40851.423062656286,Master,Student,8.970410158450163,4\n48,50461.36917766193,Master,Employed,3.932202388797901,0\n32,62294.85015879745,High School,Employed,8.643063452694966,10\n23,71814.7059763356,Bachelor,Retired,3.008268780740027,2\n30,41244.85330377107,PhD,Retired,7.13280685148513,6\n29,56230.21177676359,PhD,Retired,8.943344511051894,18\n29,60005.38666485477,Master,Retired,1.853431548103239,16\n50,63042.42953186868,PhD,Retired,7.369509672144014,1\n68,31959.450101057835,High School,Student,4.3222318383361555,0\n39,92926.53764082892,Master,Employed,6.136203036572402,18\n44,9776.113286541025,PhD,Employed,7.276945456388914,15\n54,32467.82361718624,Master,Unemployed,4.434334895391404,14\n25,41237.536661440725,Bachelor,Retired,4.884980659937531,14\n34,62273.74546112055,PhD,Student,2.7754948931330987,2\n41,73856.55846871909,High School,Employed,1.8253576625244334,16\n46,46125.67651306409,High School,Student,1.746302595596333,5\n61,56705.43558453155,High School,Student,1.5966220850546586,5\n67,79076.29613457836,Master,Retired,5.474293649130869,14\n18,44145.20975089102,Master,Employed,9.246938059576117,11\n49,41289.554936151886,PhD,Employed,2.1459683463500143,4\n48,79234.80456345512,High School,Student,5.571496274155263,4\n63,22061.729849598476,Bachelor,Employed,1.6328399394522495,0\n36,41474.651362669625,Bachelor,Unemployed,6.686865452367478,5\n19,64688.360381028135,PhD,Employed,3.1856613604877237,0\n29,63430.458337924414,High School,Retired,2.2401341959213195,15\n64,46456.06326793763,PhD,Employed,3.1628569709769523,15\n45,56616.468985418585,PhD,Student,4.327117843697822,5\n65,35113.79011276944,Bachelor,Unemployed,8.031624346557418,11\n41,54432.57479186496,High School,Employed,8.00277439018172,11\n33,50632.395407414915,Master,Retired,1.475105821263744,2\n35,61432.085314052274,Bachelor,Student,7.685223386181872,1\n23,59419.34711175786,Master,Student,5.8100261859394,19\n47,51606.848664317724,PhD,Unemployed,2.915285623870116,19\n29,26671.057403782506,Master,Employed,9.7871817189476,1\n30,6412.187374816291,High School,Student,9.344267553946937,0\n23,61336.44250743123,High School,Retired,1.824779147314021,13\n42,30506.5662684538,Master,Student,8.050883000073505,17\n26,37024.662683068775,Master,Student,1.6663508514381098,6\n36,32180.085874063327,PhD,Retired,4.129383295413061,3\n20,35317.78238277712,Master,Student,9.731329547736767,18\n31,20554.98127885621,High School,Retired,5.081703009897058,9\n59,42822.03207845498,PhD,Unemployed,4.36557204114688,17\n24,66233.5411291841,High School,Retired,3.852060724101902,18\n28,66546.30635767957,High School,Retired,9.15310147241281,15\n60,60349.7218220196,High School,Unemployed,8.241146444697556,10\n53,54820.681408433586,High School,Student,8.512974868995935,10\n69,40993.02164088048,Bachelor,Unemployed,6.832633266820297,14\n65,47454.35831250393,PhD,Unemployed,3.1509486918258904,12\n38,29081.474759957004,Master,Unemployed,3.036847610514836,1\n19,46801.27566853797,Bachelor,Retired,5.290806571900116,2\n50,69267.40070081329,Master,Student,4.864918216361547,6\n43,58784.545081573044,PhD,Student,2.4237007494552123,10\n35,41475.91780223528,High School,Retired,2.7628927917259936,17\n58,49342.53200193492,Bachelor,Student,1.2604833445276986,8\n26,64288.801171796134,Bachelor,Employed,6.403633267969196,14\n66,45089.36857924211,Bachelor,Retired,4.7297505534075315,15\n20,43134.526208009156,Bachelor,Unemployed,9.609209601377119,12\n29,55269.890264297865,Bachelor,Student,2.90394177291491,15\n27,44608.41150636335,High School,Employed,4.700998437674185,19\n31,42282.52651202527,Master,Unemployed,5.117217726687683,9\n37,35133.27999373023,PhD,Student,9.740882637578013,18\n32,31440.24270075727,PhD,Retired,1.8836115888279705,14\n65,40062.657068394736,Master,Retired,4.459063151053345,6\n27,61356.53874339946,High School,Retired,5.997246527383623,3\n24,31102.728161796946,PhD,Student,6.474014357575436,16\n36,40010.21086312503,High School,Retired,7.993428775030326,4\n", "type": "text"}, {"name": "requirements.txt", "content": "maidr\nlxml\nshiny\nseaborn\npandas\nmplfinance\nhtmltools\nwrapt\nstatsmodels\njinja2", "type": "text"}, {"name": "text.html", "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>title</title>\n</head>\n<body>\n    <iframe \n    srcdoc=\"&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;/&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;\n      &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/maidr@latest/dist/maidr_style.css&quot;/&gt;\n      &lt;script type=&quot;text/javascript&quot;&gt;\n            if (!document.querySelector(&#x27;script[src=&quot;https://cdn.jsdelivr.net/npm/maidr@latest/dist/maidr.js&quot;]&#x27;))\n            {\n                var script = document.createElement(&#x27;script&#x27;);\n                script.type = &#x27;module&#x27;;\n                script.src = &#x27;https://cdn.jsdelivr.net/npm/maidr@latest/dist/maidr.js&#x27;;\n                script.addEventListener(&#x27;load&#x27;, function() {\n                    window.main();\n                });\n                document.head.appendChild(script);\n            } else {\n                document.addEventListener(&#x27;DOMContentLoaded&#x27;, function (e) {\n                    window.main();\n                });\n            }\n        &lt;/script&gt;\n      &lt;div&gt;&lt;svg xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;720pt&quot; height=&quot;576pt&quot; viewBox=&quot;0 0 720 576&quot; version=&quot;1.1&quot; maidr-data=&quot;{&amp;#10;  &amp;quot;id&amp;quot;: &amp;quot;81914b5c-2050-4416-9a5d-7cdd36c5c307&amp;quot;,&amp;#10;  &amp;quot;subplots&amp;quot;: [&amp;#10;    [&amp;#10;      {&amp;#10;        &amp;quot;id&amp;quot;: &amp;quot;ffba0643-8e3d-4086-9de7-772e2b6b7a09&amp;quot;,&amp;#10;        &amp;quot;layers&amp;quot;: [&amp;#10;          {&amp;#10;            &amp;quot;type&amp;quot;: &amp;quot;heat&amp;quot;,&amp;#10;            &amp;quot;title&amp;quot;: &amp;quot;Random&amp;quot;,&amp;#10;            &amp;quot;axes&amp;quot;: {&amp;#10;              &amp;quot;x&amp;quot;: &amp;quot;&amp;quot;,&amp;#10;              &amp;quot;y&amp;quot;: &amp;quot;&amp;quot;,&amp;#10;              &amp;quot;fill&amp;quot;: &amp;quot;Fill&amp;quot;&amp;#10;            },&amp;#10;            &amp;quot;data&amp;quot;: {&amp;#10;              &amp;quot;points&amp;quot;: [&amp;#10;                [&amp;#10;                  0.84,&amp;#10;                  0.96,&amp;#10;                  0.13,&amp;#10;                  0.49,&amp;#10;                  0.1&amp;#10;                ],&amp;#10;                [&amp;#10;                  0.03,&amp;#10;                  0.41,&amp;#10;                  0.81,&amp;#10;                  0.57,&amp;#10;                  0.78&amp;#10;                ],&amp;#10;                [&amp;#10;                  0.73,&amp;#10;                  1.0,&amp;#10;                  0.29,&amp;#10;                  0.51,&amp;#10;                  0.65&amp;#10;                ],&amp;#10;                [&amp;#10;                  0.78,&amp;#10;                  0.33,&amp;#10;                  0.45,&amp;#10;                  0.34,&amp;#10;                  0.55&amp;#10;                ],&amp;#10;                [&amp;#10;                  0.5,&amp;#10;                  0.82,&amp;#10;                  0.91,&amp;#10;                  0.17,&amp;#10;                  0.23&amp;#10;                ]&amp;#10;              ],&amp;#10;              &amp;quot;x&amp;quot;: [&amp;#10;                &amp;quot;0&amp;quot;,&amp;#10;                &amp;quot;1&amp;quot;,&amp;#10;                &amp;quot;2&amp;quot;,&amp;#10;                &amp;quot;3&amp;quot;,&amp;#10;                &amp;quot;4&amp;quot;&amp;#10;              ],&amp;#10;              &amp;quot;y&amp;quot;: [&amp;#10;                &amp;quot;0&amp;quot;,&amp;#10;                &amp;quot;1&amp;quot;,&amp;#10;                &amp;quot;2&amp;quot;,&amp;#10;                &amp;quot;3&amp;quot;,&amp;#10;                &amp;quot;4&amp;quot;&amp;#10;              ]&amp;#10;            },&amp;#10;            &amp;quot;selectors&amp;quot;: &amp;quot;g[maidr=&#x27;d8800c4a-7e42-4cd4-bc5b-94b415006add&#x27;] &amp;gt; path&amp;quot;,&amp;#10;            &amp;quot;labels&amp;quot;: {&amp;#10;              &amp;quot;fill&amp;quot;: &amp;quot;Fill&amp;quot;&amp;#10;            }&amp;#10;          }&amp;#10;        ]&amp;#10;      }&amp;#10;    ]&amp;#10;  ]&amp;#10;}&quot;&gt;\n &lt;metadata&gt;\n  &lt;rdf:RDF xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:cc=&quot;http://creativecommons.org/ns#&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;&gt;\n   &lt;cc:Work&gt;\n    &lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot;/&gt;\n    &lt;dc:date&gt;2025-07-07T16:23:05.396763&lt;/dc:date&gt;\n    &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;\n    &lt;dc:creator&gt;\n     &lt;cc:Agent&gt;\n      &lt;dc:title&gt;Matplotlib v3.9.0, https://matplotlib.org/&lt;/dc:title&gt;\n     &lt;/cc:Agent&gt;\n    &lt;/dc:creator&gt;\n   &lt;/cc:Work&gt;\n  &lt;/rdf:RDF&gt;\n &lt;/metadata&gt;\n &lt;defs&gt;\n  &lt;style type=&quot;text/css&quot;&gt;*{stroke-linejoin: round; stroke-linecap: butt}&lt;/style&gt;\n &lt;/defs&gt;\n &lt;g id=&quot;figure_1&quot;&gt;\n  &lt;g id=&quot;maidr-0bf7c4c8-1b99-4433-b6b9-e04f5367cfd2&quot;&gt;\n   &lt;path d=&quot;M 0 576  L 720 576  L 720 0  L 0 0  z &quot; style=&quot;fill: #ffffff&quot;/&gt;\n  &lt;/g&gt;\n  &lt;g id=&quot;axes_1&quot;&gt;\n   &lt;g id=&quot;maidr-8fa24c4b-44fa-4545-9234-657ffcafde78&quot;&gt;\n    &lt;path d=&quot;M 90 512.64  L 536.4 512.64  L 536.4 69.12  L 90 69.12  z &quot; style=&quot;fill: #ffffff&quot;/&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;maidr-302b7e56-66fa-4993-adfe-f9b3978e4146&quot; maidr=&quot;d8800c4a-7e42-4cd4-bc5b-94b415006add&quot;&gt;\n    &lt;path d=&quot;M 90 69.12  L 179.28 69.12  L 179.28 157.824  L 90 157.824  L 90 69.12  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #24419a&quot;/&gt;\n    &lt;path d=&quot;M 179.28 69.12  L 268.56 69.12  L 268.56 157.824  L 179.28 157.824  L 179.28 69.12  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #11246b&quot;/&gt;\n    &lt;path d=&quot;M 268.56 69.12  L 357.84 69.12  L 357.84 157.824  L 268.56 157.824  L 268.56 69.12  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #f0f9b8&quot;/&gt;\n    &lt;path d=&quot;M 357.84 69.12  L 447.12 69.12  L 447.12 157.824  L 357.84 157.824  L 357.84 69.12  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #4ebbc2&quot;/&gt;\n    &lt;path d=&quot;M 447.12 69.12  L 536.4 69.12  L 536.4 157.824  L 447.12 157.824  L 447.12 69.12  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #f4fbc1&quot;/&gt;\n    &lt;path d=&quot;M 90 157.824  L 179.28 157.824  L 179.28 246.528  L 90 246.528  L 90 157.824  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #ffffd9&quot;/&gt;\n    &lt;path d=&quot;M 179.28 157.824  L 268.56 157.824  L 268.56 246.528  L 179.28 246.528  L 179.28 157.824  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #76cabc&quot;/&gt;\n    &lt;path d=&quot;M 268.56 157.824  L 357.84 157.824  L 357.84 246.528  L 268.56 246.528  L 268.56 157.824  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #234b9f&quot;/&gt;\n    &lt;path d=&quot;M 357.84 157.824  L 447.12 157.824  L 447.12 246.528  L 357.84 246.528  L 357.84 157.824  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #31a5c2&quot;/&gt;\n    &lt;path d=&quot;M 447.12 157.824  L 536.4 157.824  L 536.4 246.528  L 447.12 246.528  L 447.12 157.824  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #2355a4&quot;/&gt;\n    &lt;path d=&quot;M 90 246.528  L 179.28 246.528  L 179.28 335.232  L 90 335.232  L 90 246.528  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #2168ad&quot;/&gt;\n    &lt;path d=&quot;M 179.28 246.528  L 268.56 246.528  L 268.56 335.232  L 179.28 335.232  L 179.28 246.528  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #081d58&quot;/&gt;\n    &lt;path d=&quot;M 268.56 246.528  L 357.84 246.528  L 357.84 335.232  L 268.56 335.232  L 268.56 246.528  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #bde5b5&quot;/&gt;\n    &lt;path d=&quot;M 357.84 246.528  L 447.12 246.528  L 447.12 335.232  L 357.84 335.232  L 357.84 246.528  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #42b6c4&quot;/&gt;\n    &lt;path d=&quot;M 447.12 246.528  L 536.4 246.528  L 536.4 335.232  L 447.12 335.232  L 447.12 246.528  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #1e8abd&quot;/&gt;\n    &lt;path d=&quot;M 90 335.232  L 179.28 335.232  L 179.28 423.936  L 90 423.936  L 90 335.232  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #2354a3&quot;/&gt;\n    &lt;path d=&quot;M 179.28 335.232  L 268.56 335.232  L 268.56 423.936  L 179.28 423.936  L 179.28 335.232  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #a5dcb7&quot;/&gt;\n    &lt;path d=&quot;M 268.56 335.232  L 357.84 335.232  L 357.84 423.936  L 268.56 423.936  L 268.56 335.232  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #61c2bf&quot;/&gt;\n    &lt;path d=&quot;M 357.84 335.232  L 447.12 335.232  L 447.12 423.936  L 357.84 423.936  L 357.84 335.232  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #9ed9b8&quot;/&gt;\n    &lt;path d=&quot;M 447.12 335.232  L 536.4 335.232  L 536.4 423.936  L 447.12 423.936  L 447.12 335.232  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #35aac3&quot;/&gt;\n    &lt;path d=&quot;M 90 423.936  L 179.28 423.936  L 179.28 512.64  L 90 512.64  L 90 423.936  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #48b9c3&quot;/&gt;\n    &lt;path d=&quot;M 179.28 423.936  L 268.56 423.936  L 268.56 512.64  L 179.28 512.64  L 179.28 423.936  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #24479d&quot;/&gt;\n    &lt;path d=&quot;M 268.56 423.936  L 357.84 423.936  L 357.84 512.64  L 268.56 512.64  L 268.56 423.936  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #1d2e83&quot;/&gt;\n    &lt;path d=&quot;M 357.84 423.936  L 447.12 423.936  L 447.12 512.64  L 357.84 512.64  L 357.84 423.936  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #e7f6b1&quot;/&gt;\n    &lt;path d=&quot;M 447.12 423.936  L 536.4 423.936  L 536.4 512.64  L 447.12 512.64  L 447.12 423.936  &quot; clip-path=&quot;url(#pd0e0054ac2)&quot; style=&quot;fill: #d4eeb3&quot;/&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;matplotlib.axis_1&quot;&gt;\n    &lt;g id=&quot;xtick_1&quot;&gt;\n     &lt;g id=&quot;maidr-f083dbfd-a08d-4a67-ae4e-90373748b169&quot;&gt;\n      &lt;defs&gt;\n       &lt;path id=&quot;mb6d4e9af30&quot; d=&quot;M 0 0  L 0 3.5  &quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/defs&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#mb6d4e9af30&quot; x=&quot;134.64&quot; y=&quot;512.64&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_1&quot;&gt;\n      &lt;!-- 0 --&gt;\n      &lt;g transform=&quot;translate(131.45875 527.238438) scale(0.1 -0.1)&quot;&gt;\n       &lt;defs&gt;\n        &lt;path id=&quot;DejaVuSans-30&quot; d=&quot;M 2034 4250  Q 1547 4250 1301 3770  Q 1056 3291 1056 2328  Q 1056 1369 1301 889  Q 1547 409 2034 409  Q 2525 409 2770 889  Q 3016 1369 3016 2328  Q 3016 3291 2770 3770  Q 2525 4250 2034 4250  z M 2034 4750  Q 2819 4750 3233 4129  Q 3647 3509 3647 2328  Q 3647 1150 3233 529  Q 2819 -91 2034 -91  Q 1250 -91 836 529  Q 422 1150 422 2328  Q 422 3509 836 4129  Q 1250 4750 2034 4750  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n       &lt;/defs&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;xtick_2&quot;&gt;\n     &lt;g id=&quot;maidr-0ee02a35-ded5-4e15-a474-6c12604a7248&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#mb6d4e9af30&quot; x=&quot;223.92&quot; y=&quot;512.64&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_2&quot;&gt;\n      &lt;!-- 1 --&gt;\n      &lt;g transform=&quot;translate(220.73875 527.238438) scale(0.1 -0.1)&quot;&gt;\n       &lt;defs&gt;\n        &lt;path id=&quot;DejaVuSans-31&quot; d=&quot;M 794 531  L 1825 531  L 1825 4091  L 703 3866  L 703 4441  L 1819 4666  L 2450 4666  L 2450 531  L 3481 531  L 3481 0  L 794 0  L 794 531  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n       &lt;/defs&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-31&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;xtick_3&quot;&gt;\n     &lt;g id=&quot;maidr-e08853da-46b4-40b9-b175-f57986b09abd&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#mb6d4e9af30&quot; x=&quot;313.2&quot; y=&quot;512.64&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_3&quot;&gt;\n      &lt;!-- 2 --&gt;\n      &lt;g transform=&quot;translate(310.01875 527.238438) scale(0.1 -0.1)&quot;&gt;\n       &lt;defs&gt;\n        &lt;path id=&quot;DejaVuSans-32&quot; d=&quot;M 1228 531  L 3431 531  L 3431 0  L 469 0  L 469 531  Q 828 903 1448 1529  Q 2069 2156 2228 2338  Q 2531 2678 2651 2914  Q 2772 3150 2772 3378  Q 2772 3750 2511 3984  Q 2250 4219 1831 4219  Q 1534 4219 1204 4116  Q 875 4013 500 3803  L 500 4441  Q 881 4594 1212 4672  Q 1544 4750 1819 4750  Q 2544 4750 2975 4387  Q 3406 4025 3406 3419  Q 3406 3131 3298 2873  Q 3191 2616 2906 2266  Q 2828 2175 2409 1742  Q 1991 1309 1228 531  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n       &lt;/defs&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-32&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;xtick_4&quot;&gt;\n     &lt;g id=&quot;maidr-8bf39716-1ddd-4792-93f6-5d273dc89863&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#mb6d4e9af30&quot; x=&quot;402.48&quot; y=&quot;512.64&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_4&quot;&gt;\n      &lt;!-- 3 --&gt;\n      &lt;g transform=&quot;translate(399.29875 527.238438) scale(0.1 -0.1)&quot;&gt;\n       &lt;defs&gt;\n        &lt;path id=&quot;DejaVuSans-33&quot; d=&quot;M 2597 2516  Q 3050 2419 3304 2112  Q 3559 1806 3559 1356  Q 3559 666 3084 287  Q 2609 -91 1734 -91  Q 1441 -91 1130 -33  Q 819 25 488 141  L 488 750  Q 750 597 1062 519  Q 1375 441 1716 441  Q 2309 441 2620 675  Q 2931 909 2931 1356  Q 2931 1769 2642 2001  Q 2353 2234 1838 2234  L 1294 2234  L 1294 2753  L 1863 2753  Q 2328 2753 2575 2939  Q 2822 3125 2822 3475  Q 2822 3834 2567 4026  Q 2313 4219 1838 4219  Q 1578 4219 1281 4162  Q 984 4106 628 3988  L 628 4550  Q 988 4650 1302 4700  Q 1616 4750 1894 4750  Q 2613 4750 3031 4423  Q 3450 4097 3450 3541  Q 3450 3153 3228 2886  Q 3006 2619 2597 2516  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n       &lt;/defs&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-33&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;xtick_5&quot;&gt;\n     &lt;g id=&quot;maidr-5396b289-a169-4547-9eb9-8734849dc921&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#mb6d4e9af30&quot; x=&quot;491.76&quot; y=&quot;512.64&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_5&quot;&gt;\n      &lt;!-- 4 --&gt;\n      &lt;g transform=&quot;translate(488.57875 527.238438) scale(0.1 -0.1)&quot;&gt;\n       &lt;defs&gt;\n        &lt;path id=&quot;DejaVuSans-34&quot; d=&quot;M 2419 4116  L 825 1625  L 2419 1625  L 2419 4116  z M 2253 4666  L 3047 4666  L 3047 1625  L 3713 1625  L 3713 1100  L 3047 1100  L 3047 0  L 2419 0  L 2419 1100  L 313 1100  L 313 1709  L 2253 4666  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n       &lt;/defs&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-34&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;matplotlib.axis_2&quot;&gt;\n    &lt;g id=&quot;ytick_1&quot;&gt;\n     &lt;g id=&quot;maidr-2afcea37-4504-435e-bbc5-d53d119d63c8&quot;&gt;\n      &lt;defs&gt;\n       &lt;path id=&quot;me7589d3361&quot; d=&quot;M 0 0  L -3.5 0  &quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/defs&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#me7589d3361&quot; x=&quot;90&quot; y=&quot;113.472&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_6&quot;&gt;\n      &lt;!-- 0 --&gt;\n      &lt;g transform=&quot;translate(80.920312 116.65325) rotate(-90) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;ytick_2&quot;&gt;\n     &lt;g id=&quot;maidr-ccddab82-bed5-4f09-9fe4-60469c40fe2d&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#me7589d3361&quot; x=&quot;90&quot; y=&quot;202.176&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_7&quot;&gt;\n      &lt;!-- 1 --&gt;\n      &lt;g transform=&quot;translate(80.920312 205.35725) rotate(-90) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-31&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;ytick_3&quot;&gt;\n     &lt;g id=&quot;maidr-43f6421e-d588-44fc-be2b-e0e934a618bd&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#me7589d3361&quot; x=&quot;90&quot; y=&quot;290.88&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_8&quot;&gt;\n      &lt;!-- 2 --&gt;\n      &lt;g transform=&quot;translate(80.920312 294.06125) rotate(-90) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-32&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;ytick_4&quot;&gt;\n     &lt;g id=&quot;maidr-b53bc715-6ae2-4bbd-b17d-3ffb4389508f&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#me7589d3361&quot; x=&quot;90&quot; y=&quot;379.584&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_9&quot;&gt;\n      &lt;!-- 3 --&gt;\n      &lt;g transform=&quot;translate(80.920312 382.76525) rotate(-90) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-33&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;ytick_5&quot;&gt;\n     &lt;g id=&quot;maidr-44057b13-fbbb-432b-8204-ff90510bd212&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#me7589d3361&quot; x=&quot;90&quot; y=&quot;468.288&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_10&quot;&gt;\n      &lt;!-- 4 --&gt;\n      &lt;g transform=&quot;translate(80.920312 471.46925) rotate(-90) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-34&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_11&quot;&gt;\n    &lt;!-- 0.84 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(123.507188 116.231375) scale(0.1 -0.1)&quot;&gt;\n     &lt;defs&gt;\n      &lt;path id=&quot;DejaVuSans-2e&quot; d=&quot;M 684 794  L 1344 794  L 1344 0  L 684 0  L 684 794  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-38&quot; d=&quot;M 2034 2216  Q 1584 2216 1326 1975  Q 1069 1734 1069 1313  Q 1069 891 1326 650  Q 1584 409 2034 409  Q 2484 409 2743 651  Q 3003 894 3003 1313  Q 3003 1734 2745 1975  Q 2488 2216 2034 2216  z M 1403 2484  Q 997 2584 770 2862  Q 544 3141 544 3541  Q 544 4100 942 4425  Q 1341 4750 2034 4750  Q 2731 4750 3128 4425  Q 3525 4100 3525 3541  Q 3525 3141 3298 2862  Q 3072 2584 2669 2484  Q 3125 2378 3379 2068  Q 3634 1759 3634 1313  Q 3634 634 3220 271  Q 2806 -91 2034 -91  Q 1263 -91 848 271  Q 434 634 434 1313  Q 434 1759 690 2068  Q 947 2378 1403 2484  z M 1172 3481  Q 1172 3119 1398 2916  Q 1625 2713 2034 2713  Q 2441 2713 2670 2916  Q 2900 3119 2900 3481  Q 2900 3844 2670 4047  Q 2441 4250 2034 4250  Q 1625 4250 1398 4047  Q 1172 3844 1172 3481  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n     &lt;/defs&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-38&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-34&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_12&quot;&gt;\n    &lt;!-- 0.96 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(212.787188 116.231375) scale(0.1 -0.1)&quot;&gt;\n     &lt;defs&gt;\n      &lt;path id=&quot;DejaVuSans-39&quot; d=&quot;M 703 97  L 703 672  Q 941 559 1184 500  Q 1428 441 1663 441  Q 2288 441 2617 861  Q 2947 1281 2994 2138  Q 2813 1869 2534 1725  Q 2256 1581 1919 1581  Q 1219 1581 811 2004  Q 403 2428 403 3163  Q 403 3881 828 4315  Q 1253 4750 1959 4750  Q 2769 4750 3195 4129  Q 3622 3509 3622 2328  Q 3622 1225 3098 567  Q 2575 -91 1691 -91  Q 1453 -91 1209 -44  Q 966 3 703 97  z M 1959 2075  Q 2384 2075 2632 2365  Q 2881 2656 2881 3163  Q 2881 3666 2632 3958  Q 2384 4250 1959 4250  Q 1534 4250 1286 3958  Q 1038 3666 1038 3163  Q 1038 2656 1286 2365  Q 1534 2075 1959 2075  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-36&quot; d=&quot;M 2113 2584  Q 1688 2584 1439 2293  Q 1191 2003 1191 1497  Q 1191 994 1439 701  Q 1688 409 2113 409  Q 2538 409 2786 701  Q 3034 994 3034 1497  Q 3034 2003 2786 2293  Q 2538 2584 2113 2584  z M 3366 4563  L 3366 3988  Q 3128 4100 2886 4159  Q 2644 4219 2406 4219  Q 1781 4219 1451 3797  Q 1122 3375 1075 2522  Q 1259 2794 1537 2939  Q 1816 3084 2150 3084  Q 2853 3084 3261 2657  Q 3669 2231 3669 1497  Q 3669 778 3244 343  Q 2819 -91 2113 -91  Q 1303 -91 875 529  Q 447 1150 447 2328  Q 447 3434 972 4092  Q 1497 4750 2381 4750  Q 2619 4750 2861 4703  Q 3103 4656 3366 4563  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n     &lt;/defs&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-39&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-36&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_13&quot;&gt;\n    &lt;!-- 0.13 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(302.067188 116.231375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-33&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_14&quot;&gt;\n    &lt;!-- 0.49 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(391.347188 116.231375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-34&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-39&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_15&quot;&gt;\n    &lt;!-- 0.10 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(480.627188 116.231375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_16&quot;&gt;\n    &lt;!-- 0.03 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(123.507188 204.935375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-33&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_17&quot;&gt;\n    &lt;!-- 0.41 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(212.787188 204.935375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-34&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_18&quot;&gt;\n    &lt;!-- 0.81 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(302.067188 204.935375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-38&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_19&quot;&gt;\n    &lt;!-- 0.57 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(391.347188 204.935375) scale(0.1 -0.1)&quot;&gt;\n     &lt;defs&gt;\n      &lt;path id=&quot;DejaVuSans-35&quot; d=&quot;M 691 4666  L 3169 4666  L 3169 4134  L 1269 4134  L 1269 2991  Q 1406 3038 1543 3061  Q 1681 3084 1819 3084  Q 2600 3084 3056 2656  Q 3513 2228 3513 1497  Q 3513 744 3044 326  Q 2575 -91 1722 -91  Q 1428 -91 1123 -41  Q 819 9 494 109  L 494 744  Q 775 591 1075 516  Q 1375 441 1709 441  Q 2250 441 2565 725  Q 2881 1009 2881 1497  Q 2881 1984 2565 2268  Q 2250 2553 1709 2553  Q 1456 2553 1204 2497  Q 953 2441 691 2322  L 691 4666  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-37&quot; d=&quot;M 525 4666  L 3525 4666  L 3525 4397  L 1831 0  L 1172 0  L 2766 4134  L 525 4134  L 525 4666  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n     &lt;/defs&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-35&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-37&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_20&quot;&gt;\n    &lt;!-- 0.78 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(480.627188 204.935375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-37&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-38&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_21&quot;&gt;\n    &lt;!-- 0.73 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(123.507188 293.639375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-37&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-33&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_22&quot;&gt;\n    &lt;!-- 1.00 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(212.787188 293.639375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_23&quot;&gt;\n    &lt;!-- 0.29 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(302.067188 293.639375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-32&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-39&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_24&quot;&gt;\n    &lt;!-- 0.51 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(391.347188 293.639375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-35&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_25&quot;&gt;\n    &lt;!-- 0.65 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(480.627188 293.639375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-36&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-35&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_26&quot;&gt;\n    &lt;!-- 0.78 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(123.507188 382.343375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-37&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-38&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_27&quot;&gt;\n    &lt;!-- 0.33 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(212.787188 382.343375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-33&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-33&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_28&quot;&gt;\n    &lt;!-- 0.45 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(302.067188 382.343375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-34&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-35&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_29&quot;&gt;\n    &lt;!-- 0.34 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(391.347188 382.343375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-33&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-34&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_30&quot;&gt;\n    &lt;!-- 0.55 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(480.627188 382.343375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-35&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-35&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_31&quot;&gt;\n    &lt;!-- 0.50 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(123.507188 471.047375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-35&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_32&quot;&gt;\n    &lt;!-- 0.82 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(212.787188 471.047375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-38&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-32&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_33&quot;&gt;\n    &lt;!-- 0.91 --&gt;\n    &lt;g style=&quot;fill: #ffffff&quot; transform=&quot;translate(302.067188 471.047375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-39&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_34&quot;&gt;\n    &lt;!-- 0.17 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(391.347188 471.047375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-31&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-37&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_35&quot;&gt;\n    &lt;!-- 0.23 --&gt;\n    &lt;g style=&quot;fill: #262626&quot; transform=&quot;translate(480.627188 471.047375) scale(0.1 -0.1)&quot;&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-32&quot; x=&quot;95.410156&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-33&quot; x=&quot;159.033203&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;text_36&quot;&gt;\n    &lt;!-- Random --&gt;\n    &lt;g transform=&quot;translate(288.361875 63.12) scale(0.12 -0.12)&quot;&gt;\n     &lt;defs&gt;\n      &lt;path id=&quot;DejaVuSans-52&quot; d=&quot;M 2841 2188  Q 3044 2119 3236 1894  Q 3428 1669 3622 1275  L 4263 0  L 3584 0  L 2988 1197  Q 2756 1666 2539 1819  Q 2322 1972 1947 1972  L 1259 1972  L 1259 0  L 628 0  L 628 4666  L 2053 4666  Q 2853 4666 3247 4331  Q 3641 3997 3641 3322  Q 3641 2881 3436 2590  Q 3231 2300 2841 2188  z M 1259 4147  L 1259 2491  L 2053 2491  Q 2509 2491 2742 2702  Q 2975 2913 2975 3322  Q 2975 3731 2742 3939  Q 2509 4147 2053 4147  L 1259 4147  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-61&quot; d=&quot;M 2194 1759  Q 1497 1759 1228 1600  Q 959 1441 959 1056  Q 959 750 1161 570  Q 1363 391 1709 391  Q 2188 391 2477 730  Q 2766 1069 2766 1631  L 2766 1759  L 2194 1759  z M 3341 1997  L 3341 0  L 2766 0  L 2766 531  Q 2569 213 2275 61  Q 1981 -91 1556 -91  Q 1019 -91 701 211  Q 384 513 384 1019  Q 384 1609 779 1909  Q 1175 2209 1959 2209  L 2766 2209  L 2766 2266  Q 2766 2663 2505 2880  Q 2244 3097 1772 3097  Q 1472 3097 1187 3025  Q 903 2953 641 2809  L 641 3341  Q 956 3463 1253 3523  Q 1550 3584 1831 3584  Q 2591 3584 2966 3190  Q 3341 2797 3341 1997  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-6e&quot; d=&quot;M 3513 2113  L 3513 0  L 2938 0  L 2938 2094  Q 2938 2591 2744 2837  Q 2550 3084 2163 3084  Q 1697 3084 1428 2787  Q 1159 2491 1159 1978  L 1159 0  L 581 0  L 581 3500  L 1159 3500  L 1159 2956  Q 1366 3272 1645 3428  Q 1925 3584 2291 3584  Q 2894 3584 3203 3211  Q 3513 2838 3513 2113  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-64&quot; d=&quot;M 2906 2969  L 2906 4863  L 3481 4863  L 3481 0  L 2906 0  L 2906 525  Q 2725 213 2448 61  Q 2172 -91 1784 -91  Q 1150 -91 751 415  Q 353 922 353 1747  Q 353 2572 751 3078  Q 1150 3584 1784 3584  Q 2172 3584 2448 3432  Q 2725 3281 2906 2969  z M 947 1747  Q 947 1113 1208 752  Q 1469 391 1925 391  Q 2381 391 2643 752  Q 2906 1113 2906 1747  Q 2906 2381 2643 2742  Q 2381 3103 1925 3103  Q 1469 3103 1208 2742  Q 947 2381 947 1747  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-6f&quot; d=&quot;M 1959 3097  Q 1497 3097 1228 2736  Q 959 2375 959 1747  Q 959 1119 1226 758  Q 1494 397 1959 397  Q 2419 397 2687 759  Q 2956 1122 2956 1747  Q 2956 2369 2687 2733  Q 2419 3097 1959 3097  z M 1959 3584  Q 2709 3584 3137 3096  Q 3566 2609 3566 1747  Q 3566 888 3137 398  Q 2709 -91 1959 -91  Q 1206 -91 779 398  Q 353 888 353 1747  Q 353 2609 779 3096  Q 1206 3584 1959 3584  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n      &lt;path id=&quot;DejaVuSans-6d&quot; d=&quot;M 3328 2828  Q 3544 3216 3844 3400  Q 4144 3584 4550 3584  Q 5097 3584 5394 3201  Q 5691 2819 5691 2113  L 5691 0  L 5113 0  L 5113 2094  Q 5113 2597 4934 2840  Q 4756 3084 4391 3084  Q 3944 3084 3684 2787  Q 3425 2491 3425 1978  L 3425 0  L 2847 0  L 2847 2094  Q 2847 2600 2669 2842  Q 2491 3084 2119 3084  Q 1678 3084 1418 2786  Q 1159 2488 1159 1978  L 1159 0  L 581 0  L 581 3500  L 1159 3500  L 1159 2956  Q 1356 3278 1631 3431  Q 1906 3584 2284 3584  Q 2666 3584 2933 3390  Q 3200 3197 3328 2828  z &quot; transform=&quot;scale(0.015625)&quot;/&gt;\n     &lt;/defs&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-52&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-61&quot; x=&quot;67.232422&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-6e&quot; x=&quot;128.511719&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-64&quot; x=&quot;191.890625&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-6f&quot; x=&quot;255.367188&quot;/&gt;\n     &lt;use xlink:href=&quot;#DejaVuSans-6d&quot; x=&quot;316.548828&quot;/&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n  &lt;/g&gt;\n  &lt;g id=&quot;axes_2&quot;&gt;\n   &lt;g id=&quot;maidr-35a507c3-33bb-4469-bbb9-cf47aa6a4de5&quot;&gt;\n    &lt;path d=&quot;M 564.3 512.64  L 586.476 512.64  L 586.476 69.12  L 564.3 69.12  z &quot; style=&quot;fill: #ffffff&quot;/&gt;\n   &lt;/g&gt;\n   &lt;image xlink:href=&quot;data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAB8AAAJoCAYAAACeFjppAAADD0lEQVR4nO3d0ZEjMQwDUflK+ed3wZx1Wbg/HjoBFjkARM1seT/v/X0n4k9V+Jxz7jtZ423n7djP+WbFY8G9Ce733KP63E04N2SWcAmu1Wqfo2O/T00495kv2xMmuIQlXMJCxivubq+7KCbQgkM738GS4CacGzIbe8KyPeG+pyYcKzg3ZCa4BDdk5vME2mpdcdhqXb7VnYd6kwXH+twV3H3vkxWXrRYWj081NWQmuISdagmy1VjBsTeWCS7BTbjt7Qmw4La3F8CCYzuvD5au+ASXsGxPgAXHhswEl+Bel/ZOJsFNODdkJrgEN+G2tye4Y79fdY1qx/4PFlxXfKeaV9xNODdkasF1xdd5gtt5nXBqtk9wBe7Y3e3VDZlZLcHtfGNP2EUxAX4zAVstLE5brSted46GTD32rviWiQT3mW/sCcv2BHeHo63WFYetxiac+769FlxXvP5zY9Zq6jNfwiVMcAlbJhLqZ94Vp63WFa87R0NmCZcwqyXIVnMFFxaf4BLqzpdwv8f1OWw19vXnBJfghswEl+AuE7NawqyWMMElrPME91fSNvYEt/N67Ptnrb8n7jxc3GmrdcW3RnnFYcGt8wLZamHETXBecXfs7jLhPvONPcHtvF4muuK14NA1qh57V3ydJ7hr1ASX4J5qE1wC3fnWqN9DC64rDgvuqx6p96iCu0f90lALDh37/UxwAUu4hHXuFYez/agLZHykwoJb578HttqyvWCCS6gFp3a+K3LBrsgJtODQsU9wCe4Otytygmw1WHBdcVlwqs9pq6Gd18tEV3yC84q7Y5ffyain2qyW4FqtHrsqOPYzx6yWAFtt72QKZMHBnXfFZavBywTaeT32rvisluB+RZ7VElyrTXAJWyYSXJ/PagmzWkItuK44LDj20uC+dV62J7hjd602wSXcF/7+Ztx56DXYauyPULpWq7MdHbubcLNagjt212oTXMLWqATZamrCTXAJ7tjvmdUCZrWEde4Vvy/8hj3BecXdscudq2vUBJfgdr7rUsJeAibAVmPHvmUiwRXcf8gZ5lmkZyXRAAAAAElFTkSuQmCC&quot; id=&quot;imaged19564d4a5&quot; transform=&quot;scale(1 -1) translate(0 -443.52)&quot; x=&quot;564.48&quot; y=&quot;-69.12&quot; width=&quot;22.32&quot; height=&quot;443.52&quot;/&gt;\n   &lt;g id=&quot;matplotlib.axis_3&quot;/&gt;\n   &lt;g id=&quot;matplotlib.axis_4&quot;&gt;\n    &lt;g id=&quot;ytick_6&quot;&gt;\n     &lt;g id=&quot;maidr-2c03d07e-8027-4529-a394-76e57b86f91f&quot;&gt;\n      &lt;defs&gt;\n       &lt;path id=&quot;m5077f70c5b&quot; d=&quot;M 0 0  L 3.5 0  &quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/defs&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#m5077f70c5b&quot; x=&quot;586.476&quot; y=&quot;434.417765&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_37&quot;&gt;\n      &lt;!-- 0.2 --&gt;\n      &lt;g transform=&quot;translate(593.476 438.216984) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-32&quot; x=&quot;95.410156&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;ytick_7&quot;&gt;\n     &lt;g id=&quot;maidr-93ce98c9-5d22-42f0-8368-55699013e725&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#m5077f70c5b&quot; x=&quot;586.476&quot; y=&quot;342.971823&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_38&quot;&gt;\n      &lt;!-- 0.4 --&gt;\n      &lt;g transform=&quot;translate(593.476 346.771041) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-34&quot; x=&quot;95.410156&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;ytick_8&quot;&gt;\n     &lt;g id=&quot;maidr-39198df3-b609-4e49-b414-b3a7e5b69031&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#m5077f70c5b&quot; x=&quot;586.476&quot; y=&quot;251.52588&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_39&quot;&gt;\n      &lt;!-- 0.6 --&gt;\n      &lt;g transform=&quot;translate(593.476 255.325099) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-36&quot; x=&quot;95.410156&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n    &lt;g id=&quot;ytick_9&quot;&gt;\n     &lt;g id=&quot;maidr-929a6d50-3183-4cf2-8654-13705a643a81&quot;&gt;\n      &lt;g&gt;\n       &lt;use xlink:href=&quot;#m5077f70c5b&quot; x=&quot;586.476&quot; y=&quot;160.079937&quot; style=&quot;stroke: #000000; stroke-width: 0.8&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n     &lt;g id=&quot;text_40&quot;&gt;\n      &lt;!-- 0.8 --&gt;\n      &lt;g transform=&quot;translate(593.476 163.879156) scale(0.1 -0.1)&quot;&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-30&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-2e&quot; x=&quot;63.623047&quot;/&gt;\n       &lt;use xlink:href=&quot;#DejaVuSans-38&quot; x=&quot;95.410156&quot;/&gt;\n      &lt;/g&gt;\n     &lt;/g&gt;\n    &lt;/g&gt;\n   &lt;/g&gt;\n   &lt;g id=&quot;LineCollection_1&quot;/&gt;\n   &lt;g id=&quot;maidr-402a3969-8355-4552-8738-21a2ef654870&quot;&gt;\n    &lt;path d=&quot;M 564.3 512.64  L 575.388 512.64  L 586.476 512.64  L 586.476 69.12  L 575.388 69.12  L 564.3 69.12  L 564.3 512.64  z &quot; style=&quot;fill: none&quot;/&gt;\n   &lt;/g&gt;\n  &lt;/g&gt;\n &lt;/g&gt;\n &lt;defs&gt;\n  &lt;clipPath id=&quot;pd0e0054ac2&quot;&gt;\n   &lt;rect x=&quot;90&quot; y=&quot;69.12&quot; width=&quot;446.4&quot; height=&quot;443.52&quot;/&gt;\n  &lt;/clipPath&gt;\n &lt;/defs&gt;\n&lt;/svg&gt;\n&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\n    style=\"width: 100%; height: 600px; border: 1px solid #ccc; border-radius: 4px;\"\n    sandbox=\"allow-scripts allow-same-origin\"\n    title=\"Accessible Interactive Plot with MAIDR\">\n</iframe>\n</body>\n</html>", "type": "text"}, {"name": "plots/barplot.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom plots.utils import set_plot_theme, color_palettes\n\ndef create_barplot(input_barplot_color, theme):\n    \"\"\"Create a bar plot based on input parameters\"\"\"\n    color = color_palettes[input_barplot_color]\n    categories = [\"Category A\", \"Category B\", \"Category C\", \"Category D\", \"Category E\"]\n    values = np.random.randint(10, 100, size=5)\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    sns.barplot(x=categories, y=values, ax=ax, color=color)\n    ax.set_title(\"Plot of Categories\")\n    ax.set_xlabel(\"Categories\")\n    ax.set_ylabel(\"Values\")\n\n    return ax\n\ndef create_custom_barplot(df, var, color, theme):\n    \"\"\"Create a bar plot from user data\"\"\"\n    if not var or df is None:\n        return None\n        \n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    sns.countplot(data=df, x=var, color=color, ax=ax)\n    ax.set_title(f\"{var}\")\n    ax.set_xlabel(var.replace(\"_\", \" \").title())\n    ax.set_ylabel(\"Count\")\n    \n    return ax", "type": "text"}, {"name": "plots/boxplot.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom plots.utils import set_plot_theme, color_palettes\n\ndef create_boxplot(input_boxplot_type, input_boxplot_color, theme):\n    \"\"\"Create a box plot based on input parameters\"\"\"\n    boxplot_type = input_boxplot_type\n    color = color_palettes[input_boxplot_color]\n\n    # Generate data based on the selected box plot type\n    if boxplot_type == \"Positively Skewed with Outliers\":\n        data = np.random.lognormal(mean=0, sigma=0.5, size=1000)\n    elif boxplot_type == \"Negatively Skewed with Outliers\":\n        data = -np.random.lognormal(mean=0, sigma=0.5, size=1000)\n    elif boxplot_type == \"Symmetric with Outliers\":\n        data = np.random.normal(loc=0, scale=1, size=1000)\n    elif boxplot_type == \"Symmetric without Outliers\":\n        data = np.random.normal(loc=0, scale=1, size=1000)\n        data = data[(data > -1.5) & (data < 1.5)]  # Strict range to avoid outliers\n    else:\n        data = np.random.normal(loc=0, scale=1, size=1000)\n\n    # Create the plot using matplotlib\n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    sns.boxplot(x=data, ax=ax, color=color)  # Horizontal box plot\n    ax.set_title(f\"{boxplot_type}\")\n    ax.set_xlabel(\"Value\")\n\n    return ax\n\ndef create_custom_boxplot(df, var_x, var_y, color, theme):\n    \"\"\"Create a box plot from user data\"\"\"\n    if df is None:\n        return None\n        \n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    \n    if var_x and var_y:\n        sns.boxplot(x=var_y, y=var_x, data=df, palette=[color], ax=ax)\n        ax.set_title(f\"{var_x} grouped by {var_y}\")\n        ax.set_xlabel(var_y.replace(\"_\", \" \").title())\n        ax.set_ylabel(var_x.replace(\"_\", \" \").title())\n    elif var_x:\n        sns.boxplot(y=df[var_x], color=color, ax=ax)\n        ax.set_title(f\"{var_x}\")\n        ax.set_ylabel(var_x.replace(\"_\", \" \").title())\n    else:\n        return None\n        \n    return ax", "type": "text"}, {"name": "plots/candlestick.py", "content": "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport numpy as np\nimport pandas as pd\nfrom typing import Dict, List, Optional, Tuple\nfrom plots.utils import set_plot_theme, color_palettes\n\n# Try to import mplfinance, if not available use a fallback\ntry:\n    from mplfinance.original_flavor import candlestick_ohlc\n    MPLFINANCE_AVAILABLE = True\nexcept ImportError:\n    MPLFINANCE_AVAILABLE = False\n    print(\"Warning: mplfinance not available. Using fallback candlestick implementation.\")\n\ndef generate_stock_data(\n    company: str = \"Tesla\",\n    start_date: str = \"2023-01-01\",\n    end_date: str = \"2023-12-31\",\n    seed: Optional[int] = 42,\n) -> Dict[str, List]:\n    \"\"\"\n    Generate sample stock data for different companies.\n    \n    Parameters\n    ----------\n    company : str\n        Company name to determine starting price and volatility\n    start_date : str\n        Start date in YYYY-MM-DD format\n    end_date : str  \n        End date in YYYY-MM-DD format\n    seed : Optional[int]\n        Random seed for reproducibility\n        \n    Returns\n    -------\n    Dict[str, List]\n        Dictionary with OHLCV data\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Company-specific parameters\n    company_params = {\n        \"Tesla\": {\"start_price\": 200.0, \"volatility\": 0.025},\n        \"Apple\": {\"start_price\": 150.0, \"volatility\": 0.020},\n        \"NVIDIA\": {\"start_price\": 400.0, \"volatility\": 0.030},\n        \"Microsoft\": {\"start_price\": 300.0, \"volatility\": 0.018},\n        \"Google\": {\"start_price\": 2500.0, \"volatility\": 0.022},\n        \"Amazon\": {\"start_price\": 120.0, \"volatility\": 0.024},\n    }\n    \n    params = company_params.get(company, company_params[\"Tesla\"])\n    start_price = params[\"start_price\"]\n    volatility = params[\"volatility\"]\n    \n    # Generate trading dates (weekdays only)\n    all_dates = pd.date_range(start=start_date, end=end_date)\n    trading_dates = all_dates[all_dates.dayofweek < 5]  # Monday to Friday\n    dates = [d.strftime(\"%Y-%m-%d\") for d in trading_dates]\n    \n    opens = []\n    closes = []\n    highs = []\n    lows = []\n    volumes = []\n    \n    current_price = start_price\n    for i in range(len(dates)):\n        if i == 0:\n            opens.append(current_price)\n        else:\n            opens.append(closes[i - 1])\n        \n        # Generate price change with some drift\n        price_change = np.random.normal(0, volatility * opens[i])\n        \n        # Add some mean reversion\n        if opens[i] > start_price * 1.2:\n            price_change -= volatility * opens[i] * 0.1\n        elif opens[i] < start_price * 0.8:\n            price_change += volatility * opens[i] * 0.1\n        \n        close = opens[i] + price_change\n        closes.append(round(close, 2))\n        \n        # Generate high and low\n        daily_range = abs(price_change) + (volatility * opens[i])\n        high = max(opens[i], close) + abs(np.random.normal(0, daily_range / 3))\n        low = min(opens[i], close) - abs(np.random.normal(0, daily_range / 3))\n        \n        highs.append(round(high, 2))\n        lows.append(round(low, 2))\n        \n        # Generate volume\n        base_volume = 1000000\n        vol_factor = 1.0 + 2.0 * (abs(price_change) / (volatility * opens[i]))\n        volume = int(base_volume * vol_factor * np.random.uniform(0.7, 1.3))\n        volumes.append(volume)\n    \n    return {\n        \"Date\": dates,\n        \"Open\": opens,\n        \"High\": highs,\n        \"Low\": lows,\n        \"Close\": closes,\n        \"Volume\": volumes,\n    }\n\ndef draw_candlestick_fallback(ax, ohlc_data, width=0.6, colorup=\"g\", colordown=\"r\"):\n    \"\"\"\n    Fallback function to draw candlesticks when mplfinance is not available.\n    \"\"\"\n    for i, (date_num, open_price, high, low, close) in enumerate(ohlc_data):\n        # Determine color\n        color = colorup if close >= open_price else colordown\n        \n        # Adjust line width based on candlestick width for better visibility\n        line_width = max(1, width / 30) if width > 10 else 1\n        \n        # Draw the high-low line\n        ax.plot([date_num, date_num], [low, high], color=\"black\", linewidth=line_width)\n        \n        # Draw the open-close rectangle\n        height = abs(close - open_price)\n        bottom = min(open_price, close)\n        \n        rect = plt.Rectangle((date_num - width/2, bottom), width, height, \n                           facecolor=color, edgecolor=\"black\", alpha=0.8, \n                           linewidth=line_width)\n        ax.add_patch(rect)\n\ndef create_candlestick_plot(\n    data_dict: Dict[str, List],\n    company: str = \"Tesla\",\n    theme: str = \"Light\",\n    width: float = 0.6,\n    colorup: str = \"g\",\n    colordown: str = \"r\",\n    timeframe: str = \"Daily\",\n) -> plt.Axes:\n    \"\"\"\n    Create a candlestick chart from OHLC data.\n    \n    Parameters\n    ----------\n    data_dict : Dict[str, List]\n        Dictionary with OHLC data\n    company : str\n        Company name for the title\n    theme : str\n        Theme for the plot (Light/Dark)\n    width : float\n        Width of candlesticks\n    colorup : str\n        Color for up days\n    colordown : str\n        Color for down days\n        \n    Returns\n    -------\n    plt.Axes\n        The axes object with the candlestick chart\n    \"\"\"\n    # Validate data\n    array_lengths = [len(arr) for arr in data_dict.values()]\n    if len(set(array_lengths)) > 1:\n        raise ValueError(\"All arrays in data_dict must be of the same length\")\n    \n    df = pd.DataFrame(data_dict)\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n    df[\"Date_num\"] = df[\"Date\"].apply(mdates.date2num)\n    \n    # Prepare OHLC data\n    ohlc = df[[\"Date_num\", \"Open\", \"High\", \"Low\", \"Close\"]].values\n    \n    # Create figure and axes\n    fig, ax = plt.subplots(figsize=(12, 6))\n    set_plot_theme(fig, ax, theme)\n    \n    # Plot candlesticks\n    if MPLFINANCE_AVAILABLE:\n        # mplfinance uses width in data units (days)\n        candlestick_ohlc(ax, ohlc, width=width, colorup=colorup, colordown=colordown, alpha=0.8)\n    else:\n        # For fallback, adjust width based on timeframe for better visibility\n        fallback_width = width\n        if timeframe == \"Yearly\":\n            fallback_width = width * 3  # Make it even wider for fallback rendering\n        elif timeframe == \"Monthly\":\n            fallback_width = width * 2\n        draw_candlestick_fallback(ax, ohlc, width=fallback_width, colorup=colorup, colordown=colordown)\n    \n    # Format the plot based on timeframe\n    ax.xaxis_date()\n    \n    if timeframe == \"Daily\":\n        ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y-%m-%d\"))\n        ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))\n        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')\n    elif timeframe == \"Monthly\":\n        ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y-%m\"))\n        ax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')\n    elif timeframe == \"Yearly\":\n        ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\n        ax.xaxis.set_major_locator(mdates.YearLocator())\n        plt.setp(ax.xaxis.get_majorticklabels(), rotation=0, ha='center')\n    \n    ax.grid(True, linestyle=\"--\", alpha=0.6)\n    ax.set_title(f\"{company} Stock Price - Candlestick Chart\", fontsize=14, fontweight='bold')\n    ax.set_xlabel(\"Date\", fontsize=12)\n    ax.set_ylabel(\"Price ($)\", fontsize=12)\n    \n    plt.tight_layout()\n    \n    return ax\n\ndef aggregate_data_by_timeframe(data: Dict[str, List], timeframe: str) -> Dict[str, List]:\n    \"\"\"\n    Aggregate daily data to monthly or yearly timeframes.\n    \n    Parameters\n    ----------\n    data : Dict[str, List]\n        Daily OHLCV data\n    timeframe : str\n        'Daily', 'Monthly', or 'Yearly'\n        \n    Returns\n    -------\n    Dict[str, List]\n        Aggregated OHLCV data\n    \"\"\"\n    if timeframe == \"Daily\":\n        return data\n    \n    df = pd.DataFrame(data)\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n    \n    if timeframe == \"Monthly\":\n        # Group by month and year\n        df['Period'] = df['Date'].dt.to_period('M')\n        grouped = df.groupby('Period')\n        \n        aggregated_data = {\n            'Date': [],\n            'Open': [],\n            'High': [],\n            'Low': [],\n            'Close': [],\n            'Volume': []\n        }\n        \n        for period, group in grouped:\n            # Use the last day of the month as the date\n            aggregated_data['Date'].append(period.end_time.strftime('%Y-%m-%d'))\n            # First day's open price\n            aggregated_data['Open'].append(group.iloc[0]['Open'])\n            # Highest high in the month\n            aggregated_data['High'].append(group['High'].max())\n            # Lowest low in the month\n            aggregated_data['Low'].append(group['Low'].min())\n            # Last day's close price\n            aggregated_data['Close'].append(group.iloc[-1]['Close'])\n            # Sum of volumes\n            aggregated_data['Volume'].append(group['Volume'].sum())\n            \n    elif timeframe == \"Yearly\":\n        # Group by year\n        df['Period'] = df['Date'].dt.to_period('Y')\n        grouped = df.groupby('Period')\n        \n        aggregated_data = {\n            'Date': [],\n            'Open': [],\n            'High': [],\n            'Low': [],\n            'Close': [],\n            'Volume': []\n        }\n        \n        for period, group in grouped:\n            # Use December 31st as the date\n            aggregated_data['Date'].append(period.end_time.strftime('%Y-%m-%d'))\n            # First day's open price\n            aggregated_data['Open'].append(group.iloc[0]['Open'])\n            # Highest high in the year\n            aggregated_data['High'].append(group['High'].max())\n            # Lowest low in the year\n            aggregated_data['Low'].append(group['Low'].min())\n            # Last day's close price\n            aggregated_data['Close'].append(group.iloc[-1]['Close'])\n            # Sum of volumes\n            aggregated_data['Volume'].append(group['Volume'].sum())\n    \n    return aggregated_data\n\ndef create_candlestick(company, timeframe, theme):\n    \"\"\"\n    Create a candlestick plot based on company selection, timeframe, and theme.\n    This function follows the pattern used by other plot modules in the project.\n    \n    MAIDR INTEGRATION NOTE:\n    MAIDR is currently commented out in app.py to ensure the plot renders properly.\n    When MAIDR is working, you can uncomment the @render_maidr decorator \n    and comment out the manual SVG rendering in app.py.\n    \"\"\"\n    # Generate data for the selected company\n    if timeframe == \"Yearly\":\n        # Generate multiple years of data for yearly view\n        data = generate_stock_data(\n            company=company,\n            start_date=\"2018-01-01\", \n            end_date=\"2023-12-31\",\n            seed=42\n        )\n    else:\n        # Use one year of data for daily and monthly views\n        data = generate_stock_data(\n            company=company,\n            start_date=\"2023-01-01\", \n            end_date=\"2023-12-31\",\n            seed=42\n        )\n    \n    # Aggregate data based on timeframe\n    aggregated_data = aggregate_data_by_timeframe(data, timeframe)\n    \n    # Adjust candlestick width based on timeframe\n    if timeframe == \"Daily\":\n        width = 0.6\n    elif timeframe == \"Monthly\":\n        width = 25  # Wider for monthly data (fewer points)\n    elif timeframe == \"Yearly\":\n        width = 200  # Much wider for yearly data (very few points) - about 6-7 months width\n    \n    # Create the candlestick plot\n    title_suffix = f\" - {timeframe} View\"\n    ax = create_candlestick_plot(\n        aggregated_data, \n        company=company + title_suffix, \n        theme=theme,\n        timeframe=timeframe,\n        width=width\n    )\n    \n    return ax ", "type": "text"}, {"name": "plots/heatmap.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nfrom plots.utils import set_plot_theme\n\ndef create_heatmap(input_heatmap_type, theme):\n    \"\"\"Create a heatmap based on input parameters\"\"\"\n    heatmap_type = input_heatmap_type\n\n    if heatmap_type == \"Random\":\n        data = np.random.rand(5, 5)  # Reduced size\n    elif heatmap_type == \"Correlated\":\n        data = np.random.multivariate_normal(\n            [0] * 5, np.eye(5), size=5\n        )  # Reduced size\n    elif heatmap_type == \"Checkerboard\":\n        data = np.indices((5, 5)).sum(axis=0) % 2  # Reduced size\n    else:\n        data = np.random.rand(5, 5)\n\n    fig, ax = plt.subplots(figsize=(10, 8))\n    set_plot_theme(fig, ax, theme)\n    sns.heatmap(data, ax=ax, cmap=\"YlGnBu\", annot=True, fmt=\".2f\")\n    ax.set_title(f\"{heatmap_type}\")\n\n    return ax\n\ndef create_custom_heatmap(df, var_x, var_y, var_value, colorscale, theme):\n    \"\"\"Create a heatmap from user data. If an invalid colorscale is given, fall back to a safe default.\"\"\"\n    if not var_x or not var_y or df is None:\n        return None\n\n    # Determine a valid colormap\n    import matplotlib.pyplot as _plt\n    if colorscale is None or (isinstance(colorscale, str) and (colorscale.startswith('#') or colorscale not in _plt.colormaps())):\n        cmap_to_use = 'YlGnBu'\n    else:\n        cmap_to_use = colorscale\n\n    fig, ax = plt.subplots(figsize=(10, 8))\n    set_plot_theme(fig, ax, theme)\n\n    # Build aggregation table\n    if var_value:\n        pivot_table = pd.pivot_table(df, values=var_value, index=var_y, columns=var_x, aggfunc='mean')\n    else:\n        pivot_table = pd.crosstab(df[var_y], df[var_x], normalize='all')\n\n    sns.heatmap(pivot_table, ax=ax, cmap=cmap_to_use, annot=True, fmt=\".2f\")\n    ax.set_title(f\"Heatmap of {var_y} vs {var_x}\")\n    ax.set_xlabel(var_x.replace(\"_\", \" \").title())\n    ax.set_ylabel(var_y.replace(\"_\", \" \").title())\n\n    return ax", "type": "text"}, {"name": "plots/histogram.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom plots.utils import set_plot_theme, color_palettes\n\ndef create_histogram(input_distribution_type, input_hist_color, theme):\n    \"\"\"Create a histogram based on input parameters\"\"\"\n    distribution_type = input_distribution_type\n    color = color_palettes[input_hist_color]\n\n    # Generate data based on the selected distribution\n    if distribution_type == \"Normal Distribution\":\n        data = np.random.normal(size=1000)\n    elif distribution_type == \"Positively Skewed\":\n        data = np.random.exponential(scale=3, size=1000)\n    elif distribution_type == \"Negatively Skewed\":\n        data = -np.random.exponential(scale=1.5, size=1000)\n    elif distribution_type == \"Unimodal Distribution\":\n        data = np.random.normal(loc=0, scale=2.5, size=1000)\n    elif distribution_type == \"Bimodal Distribution\":\n        data = np.concatenate(\n            [\n                np.random.normal(-2, 0.5, size=500),\n                np.random.normal(2, 0.5, size=500),\n            ]\n        )\n    elif distribution_type == \"Multimodal Distribution\":\n        data = np.concatenate(\n            [\n                np.random.normal(-2, 0.5, size=300),\n                np.random.normal(2, 0.5, size=300),\n                np.random.normal(5, 0.5, size=400),\n            ]\n        )\n    else:\n        data = np.random.normal(size=1000)\n\n    # Create the plot using matplotlib\n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    sns.histplot(data, kde=True, bins=20, color=color, edgecolor=\"white\", ax=ax)\n    ax.set_title(f\"{distribution_type}\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    return ax\n    \ndef create_custom_histogram(df, var, color, theme):\n    \"\"\"Create a histogram from user data\"\"\"\n    if not var or df is None:\n        return None\n        \n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    sns.histplot(data=df, x=var, kde=True, color=color, ax=ax)\n    ax.set_title(f\"{var}\")\n    ax.set_xlabel(var.replace(\"_\", \" \").title())\n    ax.set_ylabel(\"Count\")\n    \n    return ax", "type": "text"}, {"name": "plots/lineplot.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom plots.utils import set_plot_theme, color_palettes\n\ndef create_lineplot(input_lineplot_type, input_lineplot_color, theme):\n    \"\"\"Create a line plot based on input parameters\"\"\"\n    lineplot_type = input_lineplot_type\n    color = color_palettes[input_lineplot_color]\n\n    x = np.linspace(0, 10, 20)  # Reduced number of points\n    if lineplot_type == \"Linear Trend\":\n        y = 2 * x + 1 + np.random.normal(0, 1, 20)\n    elif lineplot_type == \"Exponential Growth\":\n        y = np.exp(0.5 * x) + np.random.normal(0, 1, 20)\n    elif lineplot_type == \"Sinusoidal Pattern\":\n        y = 5 * np.sin(x) + np.random.normal(0, 0.5, 20)\n    elif lineplot_type == \"Random Walk\":\n        y = np.cumsum(np.random.normal(0, 1, 20))\n    else:\n        y = x + np.random.normal(0, 1, 20)\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    sns.lineplot(x=x, y=y, ax=ax, color=color)\n    ax.set_title(f\"{lineplot_type}\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n\n    return ax\n\ndef create_custom_lineplot(df, var_x, var_y, color, theme):\n    \"\"\"Create a line plot from user data\"\"\"\n    if not var_x or not var_y or df is None:\n        return None\n        \n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    sns.lineplot(data=df, x=var_x, y=var_y, color=color, ax=ax)\n    ax.set_title(f\"{var_y} vs {var_x}\")\n    ax.set_xlabel(var_x.replace(\"_\", \" \").title())\n    ax.set_ylabel(var_y.replace(\"_\", \" \").title())\n    \n    return ax", "type": "text"}, {"name": "plots/multilayerplot.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom plots.utils import set_plot_theme, color_palettes\n\ndef generate_multilayer_data():\n    \"\"\"Generate sample data for the multilayer plot\"\"\"\n    x = np.arange(8)\n    bar_data = np.array([3, 5, 2, 7, 3, 6, 4, 5])\n    hist_data = np.concatenate([np.random.normal(loc=i, scale=0.5, size=20) for i in x])\n    scatter_data = np.array([4, 6, 3, 8, 2, 7, 5, 6])\n    line_data = np.array([10, 8, 12, 14, 9, 11, 13, 10])\n    \n    # Create a dictionary with the generated data\n    return {\n        \"x\": x,\n        \"bar_data\": bar_data,\n        \"hist_data\": hist_data,\n        \"scatter_data\": scatter_data,\n        \"line_data\": line_data\n    }\n\ndef create_multilayer_plot(input_background_type, background_color, line_color, theme):\n    \"\"\"\n    Create a multilayer plot with a selected background plot type and a line chart in the foreground.\n    \n    Parameters\n    ----------\n    input_background_type : str\n        The type of background plot ('Bar Plot', 'Histogram', or 'Scatter Plot')\n    background_color : str\n        The color to use for the background plot\n    line_color : str\n        The color to use for the line plot\n    theme : str\n        The theme to apply to the plot ('Light' or 'Dark')\n        \n    Returns\n    -------\n    plt.Axes\n        The axes object of the created plot.\n    \"\"\"\n    # Generate sample data\n    data = generate_multilayer_data()\n    x = data[\"x\"]\n    bar_data = data[\"bar_data\"]\n    hist_data = data[\"hist_data\"]\n    scatter_data = data[\"scatter_data\"]\n    line_data = data[\"line_data\"]\n    \n    # Create a figure and a set of subplots\n    fig, ax1 = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax1, theme)\n    \n    # Get colors from the color_palettes dictionary or use default if not found\n    bg_color = color_palettes.get(background_color, \"skyblue\")\n    ln_color = color_palettes.get(line_color, \"red\")\n    \n    # Create the background plot based on the selected type\n    if input_background_type == \"Bar Plot\":\n        ax1.bar(x, bar_data, color=bg_color, label=\"Bar Data\", alpha=0.7)\n        ax1.set_ylabel(\"Bar Values\", color=bg_color)\n        y_min, y_max = 0, max(bar_data) * 1.2\n    \n    elif input_background_type == \"Histogram\":\n        # For histogram, we need to adjust the scale to fit with line plot\n        bins = np.linspace(min(hist_data), max(hist_data), 20)\n        ax1.hist(hist_data, bins=bins, color=bg_color, label=\"Histogram Data\", alpha=0.7)\n        ax1.set_ylabel(\"Frequency\", color=bg_color)\n        y_min, y_max = 0, ax1.get_ylim()[1] * 1.2\n    \n    elif input_background_type == \"Scatter Plot\":\n        ax1.scatter(x, scatter_data, color=bg_color, label=\"Scatter Data\", alpha=0.7, s=100)\n        ax1.set_ylabel(\"Y Values\", color=bg_color)\n        y_min, y_max = min(scatter_data) * 0.8, max(scatter_data) * 1.2\n    \n    ax1.tick_params(axis=\"y\", labelcolor=bg_color)\n    ax1.set_xlabel(\"X Values\")\n    \n    # Set y-axis limits for the background plot\n    ax1.set_ylim(y_min, y_max)\n    \n    # Create a second y-axis sharing the same x-axis\n    ax2 = ax1.twinx()\n    \n    # Create the line chart on the second y-axis\n    ax2.plot(x, line_data, color=ln_color, marker=\"o\", linestyle=\"-\", linewidth=2, label=\"Line Data\")\n    ax2.set_ylabel(\"Line Values\", color=ln_color)\n    ax2.tick_params(axis=\"y\", labelcolor=ln_color)\n    \n    # Add title\n    ax1.set_title(f\"Multilayer Plot: {input_background_type} with Line Plot\")\n    \n    # Add legends for both axes\n    lines1, labels1 = ax1.get_legend_handles_labels()\n    lines2, labels2 = ax2.get_legend_handles_labels()\n    ax1.legend(lines1 + lines2, labels1 + labels2, loc=\"upper left\")\n    \n    # Adjust layout\n    fig.tight_layout()\n    \n    return ax1\n\ndef create_custom_multilayer_plot(df, var_x, var_background, var_line, background_type, background_color, line_color, theme):\n    \"\"\"\n    Create a custom multilayer plot from user data.\n    \n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The dataframe containing the data to plot\n    var_x : str\n        The name of the column to use for the x-axis\n    var_background : str\n        The name of the column to use for the background plot\n    var_line : str\n        The name of the column to use for the line chart\n    background_type : str\n        The type of background plot ('Bar Plot', 'Histogram', or 'Scatter Plot')\n    background_color : str\n        The color to use for the background plot\n    line_color : str\n        The color to use for the line plot\n    theme : str\n        The theme to apply to the plot ('Light' or 'Dark')\n        \n    Returns\n    -------\n    plt.Axes\n        The axes object of the created plot.\n    \"\"\"\n    if not var_x or not var_background or not var_line or df is None:\n        return None\n    \n    # Create a figure and a set of subplots\n    fig, ax1 = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax1, theme)\n    \n    # Get data from dataframe\n    x = df[var_x].values\n    background_data = df[var_background].values\n    line_data = df[var_line].values\n    \n    # Get colors from the color_palettes dictionary or use default if not found\n    bg_color = color_palettes.get(background_color, \"skyblue\")\n    ln_color = color_palettes.get(line_color, \"red\")\n    \n    # Create the background plot based on the selected type\n    if background_type == \"Bar Plot\":\n        # For categorical x, we may need to handle the x-axis differently\n        if df[var_x].dtype == 'object':\n            x_positions = np.arange(len(x))\n            ax1.bar(x_positions, background_data, color=bg_color, label=var_background, alpha=0.7)\n            ax1.set_xticks(x_positions)\n            ax1.set_xticklabels(x)\n        else:\n            ax1.bar(x, background_data, color=bg_color, label=var_background, alpha=0.7)\n        \n        ax1.set_ylabel(var_background.replace(\"_\", \" \").title(), color=bg_color)\n        y_min, y_max = 0, max(background_data) * 1.2\n    \n    elif background_type == \"Histogram\":\n        # For histogram, we just use the background data column\n        bins = np.linspace(min(background_data), max(background_data), 20)\n        ax1.hist(background_data, bins=bins, color=bg_color, label=var_background, alpha=0.7)\n        ax1.set_ylabel(\"Frequency\", color=bg_color)\n        y_min, y_max = 0, ax1.get_ylim()[1] * 1.2\n    \n    elif background_type == \"Scatter Plot\":\n        # For categorical x, we may need to handle the x-axis differently\n        if df[var_x].dtype == 'object':\n            x_positions = np.arange(len(x))\n            ax1.scatter(x_positions, background_data, color=bg_color, label=var_background, alpha=0.7, s=100)\n            ax1.set_xticks(x_positions)\n            ax1.set_xticklabels(x)\n        else:\n            ax1.scatter(x, background_data, color=bg_color, label=var_background, alpha=0.7, s=100)\n            \n        ax1.set_ylabel(var_background.replace(\"_\", \" \").title(), color=bg_color)\n        y_min, y_max = min(background_data) * 0.8, max(background_data) * 1.2\n    \n    ax1.tick_params(axis=\"y\", labelcolor=bg_color)\n    ax1.set_xlabel(var_x.replace(\"_\", \" \").title())\n    \n    # Set y-axis limits for the background plot\n    ax1.set_ylim(y_min, y_max)\n    \n    # Create a second y-axis sharing the same x-axis\n    ax2 = ax1.twinx()\n    \n    # Create the line chart on the second y-axis\n    # For categorical x, we may need to handle the x-axis differently\n    if df[var_x].dtype == 'object' and background_type != \"Histogram\":\n        x_positions = np.arange(len(x))\n        ax2.plot(x_positions, line_data, color=ln_color, marker=\"o\", linestyle=\"-\", linewidth=2, label=var_line)\n    else:\n        ax2.plot(x, line_data, color=ln_color, marker=\"o\", linestyle=\"-\", linewidth=2, label=var_line)\n        \n    ax2.set_ylabel(var_line.replace(\"_\", \" \").title(), color=ln_color)\n    ax2.tick_params(axis=\"y\", labelcolor=ln_color)\n    \n    # Add title\n    ax1.set_title(f\"{var_background} ({background_type}) and {var_line} vs {var_x}\")\n    \n    # Add legends for both axes\n    lines1, labels1 = ax1.get_legend_handles_labels()\n    lines2, labels2 = ax2.get_legend_handles_labels()\n    ax1.legend(lines1 + lines2, labels1 + labels2, loc=\"upper left\")\n    \n    # Adjust layout\n    fig.tight_layout()\n    \n    return ax1", "type": "text"}, {"name": "plots/multilineplot.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nfrom plots.utils import set_plot_theme\n\ndef generate_multiline_data(multiline_type):\n    \"\"\"Generate data for multiline plots based on the selected type\"\"\"\n    x = np.linspace(0, 10, 30)  # 30 points for x-axis\n    series_names = [\"Series 1\", \"Series 2\", \"Series 3\"]\n    \n    if multiline_type == \"Simple Trends\":\n        # Linear trends with different slopes\n        y1 = 1.5 * x + np.random.normal(0, 1, 30)\n        y2 = 0.5 * x + 5 + np.random.normal(0, 1, 30)\n        y3 = -x + 15 + np.random.normal(0, 1, 30)\n    elif multiline_type == \"Seasonal Patterns\":\n        # Sinusoidal patterns with different phases\n        y1 = 5 * np.sin(x) + 10 + np.random.normal(0, 0.5, 30)\n        y2 = 5 * np.sin(x + np.pi/2) + 10 + np.random.normal(0, 0.5, 30)\n        y3 = 5 * np.sin(x + np.pi) + 10 + np.random.normal(0, 0.5, 30)\n    elif multiline_type == \"Growth Comparison\":\n        # Different growth patterns\n        y1 = np.exp(0.2 * x) + np.random.normal(0, 0.5, 30)\n        y2 = x**2 / 10 + np.random.normal(0, 1, 30)\n        y3 = np.log(x + 1) * 5 + np.random.normal(0, 0.5, 30)\n    else:  # Random Series\n        # Random walks with different volatilities\n        y1 = np.cumsum(np.random.normal(0, 0.5, 30))\n        y2 = np.cumsum(np.random.normal(0.1, 0.7, 30))\n        y3 = np.cumsum(np.random.normal(-0.05, 0.9, 30))\n    \n    # Create a dataframe with the generated data\n    return pd.DataFrame({\n        \"x\": np.tile(x, 3),\n        \"y\": np.concatenate([y1, y2, y3]),\n        \"series\": np.repeat(series_names, len(x))\n    })\n\ndef create_multiline_plot(data, input_multiline_type, input_multiline_color, theme):\n    \"\"\"Create a multiline plot based on input parameters and data\"\"\"\n    multiline_type = input_multiline_type\n    palette = input_multiline_color\n    \n    # Map friendly palette names to seaborn palette names\n    palette_mapping = {\n        \"Default\": None,  # Use default seaborn palette\n        \"Colorful\": \"Set1\",\n        \"Pastel\": \"Set2\",\n        \"Dark Tones\": \"Dark2\",\n        \"Paired Colors\": \"Paired\",\n        \"Rainbow\": \"Spectral\"\n    }\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    \n    # Use seaborn lineplot for multiple lines\n    if palette == \"Default\":\n        # Use default seaborn color palette\n        sns.lineplot(\n            x=\"x\", y=\"y\", hue=\"series\", style=\"series\", \n            markers=True, dashes=True, data=data, ax=ax\n        )\n    else:\n        # Use selected color palette\n        sns.lineplot(\n            x=\"x\", y=\"y\", hue=\"series\", style=\"series\", \n            markers=True, dashes=True, data=data, ax=ax,\n            palette=palette_mapping[palette]\n        )\n    \n    # Customize the plot\n    ax.set_title(f\"Multiline Plot: {multiline_type}\")\n    ax.set_xlabel(\"X values\")\n    ax.set_ylabel(\"Y values\")\n    \n    return ax\n\ndef create_custom_multiline_plot(df, var_x, var_y, var_group, palette, theme):\n    \"\"\"Create a multiline plot from user data\"\"\"\n    if not var_x or not var_y or not var_group or df is None:\n        return None\n    \n    # Map friendly palette names to seaborn palette names\n    palette_mapping = {\n        \"Default\": None,  # Use default seaborn palette\n        \"Colorful\": \"Set1\",\n        \"Pastel\": \"Set2\",\n        \"Dark Tones\": \"Dark2\",\n        \"Paired Colors\": \"Paired\",\n        \"Rainbow\": \"Spectral\"\n    }\n    \n    # Create the plot\n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    \n    # Use seaborn lineplot for multiple lines\n    if palette == \"Default\":\n        # Use default seaborn color palette\n        sns.lineplot(\n            x=var_x, y=var_y, hue=var_group, style=var_group, \n            markers=True, dashes=True, data=df, ax=ax\n        )\n    else:\n        # Use selected color palette\n        sns.lineplot(\n            x=var_x, y=var_y, hue=var_group, style=var_group, \n            markers=True, dashes=True, data=df, ax=ax,\n            palette=palette_mapping[palette]\n        )\n    \n    # Customize the plot\n    ax.set_title(f\"{var_y} vs {var_x} by {var_group}\")\n    ax.set_xlabel(var_x.replace(\"_\", \" \").title())\n    ax.set_ylabel(var_y.replace(\"_\", \" \").title())\n    \n    return ax", "type": "text"}, {"name": "plots/multipanelplot.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom plots.utils import set_plot_theme\n\ndef generate_multipanel_data():\n    \"\"\"Generate sample data for the multipanel plot\"\"\"\n    # Data for line plot\n    x_line = np.array([1, 2, 3, 4, 5, 6, 7, 8])\n    y_line = np.array([2, 4, 1, 5, 3, 7, 6, 8])\n    \n    # Data for first bar plot\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    values = np.random.rand(5) * 10\n    \n    # Data for second bar plot\n    categories_2 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    values_2 = np.random.randn(5) * 100\n    \n    # Data for scatter plot\n    x_scatter = np.random.randn(50)\n    y_scatter = np.random.randn(50)\n    \n    # Create a dictionary with the generated data\n    return {\n        \"x_line\": x_line,\n        \"y_line\": y_line,\n        \"categories\": categories,\n        \"values\": values,\n        \"categories_2\": categories_2,\n        \"values_2\": values_2,\n        \"x_scatter\": x_scatter,\n        \"y_scatter\": y_scatter\n    }\n\ndef create_multipanel_plot(layout_type, color_palette, theme):\n    \"\"\"\n    Create a multipanel plot with different subplot types arranged in a specified layout.\n    \n    Parameters\n    ----------\n    layout_type : str\n        The type of layout ('Grid 2x2', 'Row', 'Column', 'Mixed')\n    color_palette : str\n        The color palette to use for the plots\n    theme : str\n        The theme to apply to the plot ('Light' or 'Dark')\n        \n    Returns\n    -------\n    plt.Axes\n        The first axes object of the created plot (for maidr compatibility).\n    \"\"\"\n    # Generate sample data\n    data = generate_multipanel_data()\n    x_line = data[\"x_line\"]\n    y_line = data[\"y_line\"]\n    categories = data[\"categories\"]\n    values = data[\"values\"]\n    categories_2 = data[\"categories_2\"]\n    values_2 = data[\"values_2\"]\n    x_scatter = data[\"x_scatter\"]\n    y_scatter = data[\"y_scatter\"]\n    \n    # Create a figure with 3 subplots arranged vertically\n    fig, axs = plt.subplots(3, 1, figsize=(10, 12))\n    \n    # Make sure this figure is the current figure\n    plt.figure(fig.number)\n    \n    # First panel: Line plot\n    axs[0].plot(x_line, y_line, color=\"blue\", linewidth=2)\n    axs[0].set_title(\"Line Plot: Random Data\")\n    axs[0].set_xlabel(\"X-axis\")\n    axs[0].set_ylabel(\"Values\")\n    axs[0].grid(True, linestyle=\"--\", alpha=0.7)\n    \n    # Second panel: Bar plot\n    axs[1].bar(categories, values, color=\"green\", alpha=0.7)\n    axs[1].set_title(\"Bar Plot: Random Values\")\n    axs[1].set_xlabel(\"Categories\")\n    axs[1].set_ylabel(\"Values\")\n    \n    # Third panel: Bar plot\n    axs[2].bar(categories_2, values_2, color=\"blue\", alpha=0.7)\n    axs[2].set_title(\"Bar Plot 2: Random Values\")\n    axs[2].set_xlabel(\"Categories\")\n    axs[2].set_ylabel(\"Values\")\n    \n    # Apply theme to all subplots\n    for ax in axs.flat:\n        set_plot_theme(fig, ax, theme)\n    \n    # Adjust layout to prevent overlap\n    plt.tight_layout()\n    \n    # Return the first axes object for maidr compatibility\n    return axs[0]\n\ndef create_custom_multipanel_plot(df, vars_config, layout_type, color_palette, theme):\n    \"\"\"\n    Create a custom multipanel plot from user data.\n    \n    Parameters\n    ----------\n    df : pandas.DataFrame\n        The dataframe containing the data to plot\n    vars_config : dict\n        Dictionary containing variables for each subplot\n        Example: {\n            'plot1': {'type': 'line', 'x': 'col1', 'y': 'col2'},\n            'plot2': {'type': 'bar', 'x': 'col3', 'y': 'col4'},\n            'plot3': {'type': 'bar', 'x': 'col5', 'y': 'col6'},\n        }\n    layout_type : str\n        The type of layout ('Vertical', 'Horizontal', 'Grid')\n    color_palette : str\n        The color palette to use for the plots\n    theme : str\n        The theme to apply to the plot ('Light' or 'Dark')\n        \n    Returns\n    -------\n    plt.Axes\n        The first axes object of the created plot (for maidr compatibility).\n    \"\"\"\n    if df is None or not vars_config:\n        return None\n    \n    # Extract configuration for each plot\n    plot1_config = vars_config.get('plot1', {})\n    plot2_config = vars_config.get('plot2', {})\n    plot3_config = vars_config.get('plot3', {})\n    \n    plot1_type = plot1_config.get('type', 'line')\n    plot1_x = plot1_config.get('x', None)\n    plot1_y = plot1_config.get('y', None)\n    \n    plot2_type = plot2_config.get('type', 'bar')\n    plot2_x = plot2_config.get('x', None)\n    plot2_y = plot2_config.get('y', None)\n    \n    plot3_type = plot3_config.get('type', 'bar')\n    plot3_x = plot3_config.get('x', None)\n    plot3_y = plot3_config.get('y', None)\n    \n    # Check if required variables exist\n    if not all([plot1_x, plot1_y, plot2_x, plot2_y, plot3_x, plot3_y]):\n        return None\n    \n    if not all([var in df.columns for var in [plot1_x, plot1_y, plot2_x, plot2_y, plot3_x, plot3_y]]):\n        return None\n    \n    # Create the figure with 3 subplots arranged vertically\n    fig, axs = plt.subplots(3, 1, figsize=(10, 12))\n    \n    # Make sure this figure is the current figure\n    plt.figure(fig.number)\n    \n    # First panel\n    if plot1_type == 'line':\n        axs[0].plot(df[plot1_x], df[plot1_y], color=\"blue\", linewidth=2)\n        axs[0].set_title(f\"Line Plot: {plot1_y} vs {plot1_x}\")\n        axs[0].grid(True, linestyle=\"--\", alpha=0.7)\n    elif plot1_type == 'scatter':\n        axs[0].scatter(df[plot1_x], df[plot1_y], color=\"blue\", alpha=0.7)\n        axs[0].set_title(f\"Scatter Plot: {plot1_y} vs {plot1_x}\")\n    elif plot1_type == 'bar':\n        if df[plot1_x].dtype == 'object' or df[plot1_x].nunique() < 15:\n            # For categorical x or small number of values\n            value_counts = df.groupby(plot1_x)[plot1_y].mean()\n            value_counts.plot(kind='bar', ax=axs[0], color=\"blue\", alpha=0.7)\n        else:\n            axs[0].bar(df[plot1_x], df[plot1_y], color=\"blue\", alpha=0.7)\n        axs[0].set_title(f\"Bar Plot: {plot1_y} by {plot1_x}\")\n    \n    axs[0].set_xlabel(plot1_x.replace(\"_\", \" \").title())\n    axs[0].set_ylabel(plot1_y.replace(\"_\", \" \").title())\n    \n    # Second panel\n    if plot2_type == 'line':\n        axs[1].plot(df[plot2_x], df[plot2_y], color=\"green\", linewidth=2)\n        axs[1].set_title(f\"Line Plot: {plot2_y} vs {plot2_x}\")\n        axs[1].grid(True, linestyle=\"--\", alpha=0.7)\n    elif plot2_type == 'scatter':\n        axs[1].scatter(df[plot2_x], df[plot2_y], color=\"green\", alpha=0.7)\n        axs[1].set_title(f\"Scatter Plot: {plot2_y} vs {plot2_x}\")\n    elif plot2_type == 'bar':\n        if df[plot2_x].dtype == 'object' or df[plot2_x].nunique() < 15:\n            # For categorical x or small number of values\n            value_counts = df.groupby(plot2_x)[plot2_y].mean()\n            value_counts.plot(kind='bar', ax=axs[1], color=\"green\", alpha=0.7)\n        else:\n            axs[1].bar(df[plot2_x], df[plot2_y], color=\"green\", alpha=0.7)\n        axs[1].set_title(f\"Bar Plot: {plot2_y} by {plot2_x}\")\n    \n    axs[1].set_xlabel(plot2_x.replace(\"_\", \" \").title())\n    axs[1].set_ylabel(plot2_y.replace(\"_\", \" \").title())\n    \n    # Third panel\n    if plot3_type == 'line':\n        axs[2].plot(df[plot3_x], df[plot3_y], color=\"blue\", linewidth=2)\n        axs[2].set_title(f\"Line Plot: {plot3_y} vs {plot3_x}\")\n        axs[2].grid(True, linestyle=\"--\", alpha=0.7)\n    elif plot3_type == 'scatter':\n        axs[2].scatter(df[plot3_x], df[plot3_y], color=\"blue\", alpha=0.7)\n        axs[2].set_title(f\"Scatter Plot: {plot3_y} vs {plot3_x}\")\n    elif plot3_type == 'bar':\n        if df[plot3_x].dtype == 'object' or df[plot3_x].nunique() < 15:\n            # For categorical x or small number of values\n            value_counts = df.groupby(plot3_x)[plot3_y].mean()\n            value_counts.plot(kind='bar', ax=axs[2], color=\"blue\", alpha=0.7)\n        else:\n            axs[2].bar(df[plot3_x], df[plot3_y], color=\"blue\", alpha=0.7)\n        axs[2].set_title(f\"Bar Plot: {plot3_y} by {plot3_x}\")\n    \n    axs[2].set_xlabel(plot3_x.replace(\"_\", \" \").title())\n    axs[2].set_ylabel(plot3_y.replace(\"_\", \" \").title())\n    \n    # Apply theme to all subplots\n    for ax in axs.flat:\n        set_plot_theme(fig, ax, theme)\n    \n    # Adjust layout to prevent overlap\n    plt.tight_layout()\n    \n    # Return the first axes object for maidr compatibility\n    return axs[0]", "type": "text"}, {"name": "plots/scatterplot.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom plots.utils import set_plot_theme, color_palettes\n\ndef create_scatterplot(input_scatterplot_type, input_scatter_color, theme):\n    \"\"\"Create a scatter plot with regression layers based on input parameters\"\"\"\n    scatterplot_type = input_scatterplot_type\n    color = color_palettes[input_scatter_color]\n\n    num_points = np.random.randint(20, 31)  # Randomly select between 20 and 30 points\n    if scatterplot_type == \"No Correlation\":\n        x = np.random.uniform(size=num_points)\n        y = np.random.uniform(size=num_points)\n    elif scatterplot_type == \"Weak Positive Correlation\":\n        x = np.random.uniform(size=num_points)\n        y = 0.3 * x + np.random.uniform(size=num_points)\n    elif scatterplot_type == \"Strong Positive Correlation\":\n        x = np.random.uniform(size=num_points)\n        y = 0.9 * x + np.random.uniform(size=num_points) * 0.1\n    elif scatterplot_type == \"Weak Negative Correlation\":\n        x = np.random.uniform(size=num_points)\n        y = -0.3 * x + np.random.uniform(size=num_points)\n    elif scatterplot_type == \"Strong Negative Correlation\":\n        x = np.random.uniform(size=num_points)\n        y = -0.9 * x + np.random.uniform(size=num_points) * 0.1\n    else:\n        x = np.random.uniform(size=num_points)\n        y = np.random.uniform(size=num_points)\n\n    # Create the plot using matplotlib\n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    \n    # Ensure clean white background (remove any pink tinting)\n    if theme != \"Dark\":\n        ax.set_facecolor('white')\n        fig.patch.set_facecolor('white')\n    \n    # Layer 1: Scatter points (original layer)\n    sns.scatterplot(x=x, y=y, ax=ax, color=color, s=60, alpha=0.7, label=\"Data Points\")\n    \n    # Layer 2: Best fit straight line (linear regression)\n    sns.regplot(x=x, y=y, ax=ax, scatter=False, color=\"red\", \n                line_kws={'linewidth': 2, 'alpha': 0.8}, label=\"Linear Fit\",\n                ci=None)  # Remove confidence interval to avoid pink shading\n    \n    # Layer 3: Loess smooth line (LOWESS regression)\n    sns.regplot(x=x, y=y, ax=ax, scatter=False, lowess=True, color=\"blue\",\n                line_kws={'linewidth': 2, 'alpha': 0.8, 'linestyle': '--'}, label=\"LOESS Smooth\",\n                ci=None)  # Remove confidence interval to avoid pink shading\n    \n    ax.set_title(f\"{scatterplot_type}\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n    ax.legend()\n\n    return ax\n\ndef create_custom_scatterplot(df, var_x, var_y, color, theme):\n    \"\"\"Create a scatter plot with regression layers from user data\"\"\"\n    if not var_x or not var_y or df is None:\n        return None\n        \n    fig, ax = plt.subplots(figsize=(10, 6))\n    set_plot_theme(fig, ax, theme)\n    \n    # Ensure clean white background (remove any pink tinting)\n    if theme != \"Dark\":\n        ax.set_facecolor('white')\n        fig.patch.set_facecolor('white')\n    \n    # Layer 1: Scatter points (original layer)\n    sns.scatterplot(data=df, x=var_x, y=var_y, color=color, ax=ax, \n                    s=60, alpha=0.7, label=\"Data Points\")\n    \n    # Layer 2: Best fit straight line (linear regression)\n    sns.regplot(data=df, x=var_x, y=var_y, ax=ax, scatter=False, color=\"red\",\n                line_kws={'linewidth': 2, 'alpha': 0.8}, label=\"Linear Fit\",\n                ci=None)  # Remove confidence interval to avoid pink shading\n    \n    # Layer 3: Loess smooth line (LOWESS regression)\n    sns.regplot(data=df, x=var_x, y=var_y, ax=ax, scatter=False, lowess=True, color=\"blue\",\n                line_kws={'linewidth': 2, 'alpha': 0.8, 'linestyle': '--'}, label=\"LOESS Smooth\",\n                ci=None)  # Remove confidence interval to avoid pink shading\n    \n    ax.set_title(f\"{var_y} vs {var_x}\")\n    ax.set_xlabel(var_x.replace(\"_\", \" \").title())\n    ax.set_ylabel(var_y.replace(\"_\", \" \").title())\n    ax.legend()\n    \n    return ax", "type": "text"}, {"name": "plots/utils.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\ndef set_plot_theme(fig, ax, theme):\n    \"\"\"Apply the appropriate theme to a plot\"\"\"\n    if theme == \"Dark\":\n        plt.style.use(\"dark_background\")\n        fig.patch.set_facecolor(\"#2E2E2E\")\n        ax.set_facecolor(\"#2E2E2E\")\n    else:\n        plt.style.use(\"default\")\n        fig.patch.set_facecolor(\"white\")\n        ax.set_facecolor(\"white\")\n        \n# Dictionary of color palettes\ncolor_palettes = {\n    \"Default\": \"#007bc2\",\n    \"Red\": \"#FF0000\",\n    \"Green\": \"#00FF00\",\n    \"Blue\": \"#0000FF\",\n    \"Purple\": \"#800080\",\n    \"Orange\": \"#FFA500\",\n}", "type": "text"}]